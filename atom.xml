<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YongQian&#39;s Blog</title>
  <subtitle>不积跬步无以至千里</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yongqianvip.github.io/"/>
  <updated>2016-10-18T02:22:51.000Z</updated>
  <id>http://yongqianvip.github.io/</id>
  
  <author>
    <name>Yin Yongqian</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>升级Xcode8后 React-Native项目遇到的错误</title>
    <link href="http://yongqianvip.github.io/2016/10/18/RN-Erroe-Xcode8/"/>
    <id>http://yongqianvip.github.io/2016/10/18/RN-Erroe-Xcode8/</id>
    <published>2016-10-18T02:18:57.000Z</published>
    <updated>2016-10-18T02:22:51.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-RCTWebSocket-Semantic-issue"><a href="#1-RCTWebSocket-Semantic-issue" class="headerlink" title="1  RCTWebSocket Semantic issue"></a>1  RCTWebSocket Semantic issue</h2><ul>
<li><p>1.</p>
<p>  <img src="http://upload-images.jianshu.io/upload_images/1512008-675afddffc3fd6c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>  打开RCTSCrollView.m Command+F 搜索@implementation RCTCustomScrollView<br>  只会搜索到一个结果，然后修改：</p>
<pre><code>@implementation RCTCustomScrollView
{
      RCTRefreshControl *_refreshControl;//不管原来有什么，在原来的基础上加上这句
}
</code></pre></li>
<li><p>2.</p>
<p>  <img src="http://upload-images.jianshu.io/upload_images/1512008-9a9c4b0bed6b406f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<pre><code>//  SecRandomCopyBytes(kSecRandomDefault, keyBytes.length, keyBytes.mutableBytes);
  (void)SecRandomCopyBytes(kSecRandomDefault, keyBytes.length, keyBytes.mutableBytes);
</code></pre></li>
</ul>
<h2 id="2-nw-connection-get-connected-socket-block-invoke"><a href="#2-nw-connection-get-connected-socket-block-invoke" class="headerlink" title="2 __nw_connection_get_connected_socket_block_invoke"></a>2 __nw_connection_get_connected_socket_block_invoke</h2><p>Xocde控制台不断输出 如下log</p>
<pre><code>[] __nw_connection_get_connected_socket_block_invoke * Connection has no connected handler
</code></pre><ol>
<li>Xcode menu -&gt; Product -&gt; Edit Scheme…</li>
<li>Environment Variables -&gt; Add -&gt; Name: “OS_ACTIVITY_MODE”, Value:”disable”</li>
<li>Run again</li>
</ol>
<p><img src="http://7xp7q7.com1.z0.glb.clouddn.com/image/rn/error/rnwebsocket.png" alt=""></p>
<h2 id="3-Apple-Mach-O-Linker-Id-Error"><a href="#3-Apple-Mach-O-Linker-Id-Error" class="headerlink" title="3 Apple Mach-O Linker(Id) Error"></a>3 Apple Mach-O Linker(Id) Error</h2><p><img src="http://7xp7q7.com1.z0.glb.clouddn.com/image/rn/error/rn_err_apple_mach.png" alt=""><br>在<code>TARGETS</code>下 <code>Build setting</code> -&gt; <code>Other Linker Flags</code> -&gt;<br>添加 <code>-lc++</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-RCTWebSocket-Semantic-issue&quot;&gt;&lt;a href=&quot;#1-RCTWebSocket-Semantic-issue&quot; class=&quot;headerlink&quot; title=&quot;1  RCTWebSocket Semantic issue&quot;&gt;&lt;/
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>拥抱微信小程序</title>
    <link href="http://yongqianvip.github.io/2016/10/10/hugwxxcx/"/>
    <id>http://yongqianvip.github.io/2016/10/10/hugwxxcx/</id>
    <published>2016-10-09T16:00:00.000Z</published>
    <updated>2016-10-18T02:39:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>2016年国庆前一周，腾讯公布<strong>微信小程序</strong>开始内测。</p>
<p>顿时IT圈子沸腾了，更有意思的是，在距离腾讯公布微信小程序开始内测的短短不到24小时的时间内，微信开发者工具被破解，没有内测资格的程序员也可以尝鲜，各个QQ群，微信群瞬间聚集了一大批程序猿热火朝天的讨论着小程序的前景，开发环境，开发过程等话题，由此可见猿猿们对此关注的程度。<br><a id="more"></a><br><img src="http://7xp7q7.com1.z0.glb.clouddn.com/image/jianshu/wechat.jpg" alt=""></p>
<h2 id="写在前头"><a href="#写在前头" class="headerlink" title="写在前头"></a>写在前头</h2><p>最近有段时间没有写文章了，国庆假期刚过，完善了一下假期前写的微信小程序，特地把源码分享出来，所以本文并<strong>不是 小程序开发教程</strong>，想学习如何开发微信小程序，还是去看<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/?t=1475052055756" target="_blank" rel="external">官方的文档</a>，这里只做分享和项目简介。</p>
<h2 id="跟风作案"><a href="#跟风作案" class="headerlink" title="跟风作案"></a>跟风作案</h2><p>看着大家各个摩拳擦掌，跃跃欲试，笔者也忍不住玩弄一把，说干就干。</p>
<p>想做一个小程序，首先得有数据，我首先想到的是三年前自己仿制的一个视频app（<a href="http://www.vmovier.com" target="_blank" rel="external">V电影</a>），没想到三年后还要用他们的接口…… </p>
<p>首先贴一下<a href="https://github.com/yongqianvip/wechat-Vvideo" target="_blank" rel="external">源码</a></p>
<p>由于时间仓促，功能不完善，望各位看官谅解……</p>
<p>如果觉得还不错，还请★一下，以示鼓励😂😂😂😂</p>
<h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><h3 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h3><p>想要开始开发小程序，人家<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/?t=1475052055756" target="_blank" rel="external">官方的文档</a>还是要简单的通读一遍，不然会像小白一样，问一些文档上写的明明白白的小白问题</p>
<h3 id="微信小程序IDE破解"><a href="#微信小程序IDE破解" class="headerlink" title="微信小程序IDE破解"></a>微信小程序IDE破解</h3><p>感谢<a href="http://weibo.com/gavinkwoe?refer_flag=1001030101_&amp;is_all=1" target="_blank" rel="external">@老郭为人民服务</a>为我们提供了破解版的微信小程序IDE，参照<a href="https://github.com/gavinkwoe/weapp-ide-crack" target="_blank" rel="external">这份教程</a>，搭建完整的开发测试环境</p>
<h2 id="项目简述"><a href="#项目简述" class="headerlink" title="项目简述"></a>项目简述</h2><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><p><img src="http://7xp7q7.com1.z0.glb.clouddn.com/image/wx/vvideo/folder.png" alt=""> </p>
<p><strong>基本注意事项：</strong></p>
<ol>
<li>各个页面都在<code>page</code>文件夹下，如：首页<code>home</code> 频道 <code>channel</code> 系列<code>series</code> 视频播放<code>playview</code>等。 </li>
<li>每个页面的文件夹下包含一个 <em>.js 和 </em>.wxml。</li>
<li>util文件夹下是接口文件和工具类</li>
<li><p>新建的页面必须在根目录下的app.json中注册，如：</p>
<pre><code>{
    &quot;pages&quot;: [
        &quot;page/home/home&quot;,
        &quot;page/test/test&quot;,
        &quot;page/playview/playview&quot;,
        &quot;page/channel/channel&quot;,
        &quot;page/channelList/channelList&quot;,
        &quot;page/series/series&quot;,
        &quot;page/seriesDetail/seriesDetail&quot;
    ],
    ...
}
</code></pre></li>
<li><p>app.json中可以配置tabbar，但list至少有两项，如：</p>
<pre><code>{
    &quot;tabBar&quot;: {
        &quot;color&quot;: &quot;#8a8a8a&quot;,
        &quot;selectedColor&quot;: &quot;#00bb9c&quot;,
        &quot;borderStyle&quot;: &quot;black&quot;,
        &quot;backgroundColor&quot;: &quot;#ffffff&quot;,
        &quot;list&quot;: [{
            &quot;pagePath&quot;: &quot;page/home/home&quot;,
            &quot;iconPath&quot;: &quot;image/film64.png&quot;,
            &quot;selectedIconPath&quot;: &quot;image/filmHL64.png&quot;,
            &quot;text&quot;: &quot;V电影&quot;
        },{
            &quot;pagePath&quot;: &quot;page/channel/channel&quot;,
            &quot;iconPath&quot;: &quot;image/channel64.png&quot;,
            &quot;selectedIconPath&quot;: &quot;image/channelHL64.png&quot;,
            &quot;text&quot;: &quot;频道&quot;
        },{
            &quot;pagePath&quot;: &quot;page/series/series&quot;,
            &quot;iconPath&quot;: &quot;image/series64.png&quot;,
            &quot;selectedIconPath&quot;: &quot;image/seriesHL64.png&quot;,
            &quot;text&quot;: &quot;系列&quot;
        },{
            &quot;pagePath&quot;: &quot;page/test/test&quot;,
            &quot;iconPath&quot;: &quot;image/playground64.png&quot;,
            &quot;selectedIconPath&quot;: &quot;image/playgroundHL64.png&quot;,
            &quot;text&quot;: &quot;playground&quot;
        }]
    },
    ...
}
</code></pre></li>
<li>界面布局用flex布局，对flex不熟悉的，参考<a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?utm_source=tuicool" target="_blank" rel="external">阮一峰老师的这篇文章</a></li>
<li><p>系统提供了获取App对象的方法</p>
<pre><code>var APP = getApp();
</code></pre><p>所以界面间传值使用的是app.globalData。</p>
</li>
</ol>
<h2 id="Demo效果图"><a href="#Demo效果图" class="headerlink" title="Demo效果图"></a>Demo效果图</h2><p><img src="http://7xp7q7.com1.z0.glb.clouddn.com/image/wx/vvideo/recorder6.gif" alt=""></p>
<p><img src="http://7xp7q7.com1.z0.glb.clouddn.com/image/wx/vvideo/vvideo_screen_6.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2016年国庆前一周，腾讯公布&lt;strong&gt;微信小程序&lt;/strong&gt;开始内测。&lt;/p&gt;
&lt;p&gt;顿时IT圈子沸腾了，更有意思的是，在距离腾讯公布微信小程序开始内测的短短不到24小时的时间内，微信开发者工具被破解，没有内测资格的程序员也可以尝鲜，各个QQ群，微信群瞬间聚集了一大批程序猿热火朝天的讨论着小程序的前景，开发环境，开发过程等话题，由此可见猿猿们对此关注的程度。&lt;br&gt;
    
    </summary>
    
    
      <category term="Wechat" scheme="http://yongqianvip.github.io/tags/Wechat/"/>
    
  </entry>
  
  <entry>
    <title>没有迈不过去的坎，也没有翻不过去的墙</title>
    <link href="http://yongqianvip.github.io/2016/09/09/aws_vpn/"/>
    <id>http://yongqianvip.github.io/2016/09/09/aws_vpn/</id>
    <published>2016-09-09T07:07:25.000Z</published>
    <updated>2016-09-14T13:12:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>这里记录一下我是如何在Mac上借助AWS(Amazon Web Services)<strong>免费</strong>搭建VPN服务器的<br><a id="more"></a></p>
<blockquote>
<p>生活用百度，技术用谷歌<br>由于种种原因，我们并不能直接访问谷歌等一些国外网站<br>但是，<br>“没有什么事是程序员不能解决的，如果有，那就让别人解决吧”  </p>
</blockquote>
<p><strong>Q: How to do？</strong></p>
<p><strong>A: Follow me！</strong></p>
<p>这里要说明一点，服务确实是免费的(为期一年，超过一年将收费)，不过仍然<strong>需要一张信用卡</strong>，亚马逊需要1美元的授权，只是授权，不会加入账单，在我看来可以理解为押金，如果你用的全部是套餐内的服务，钱是不会被扣的，而如果超出了套餐内容，这笔钱会根据用量扣除，下文也会讲到如何避免。</p>
<p>网上这种类似的教程很多，但是就像穿鞋，合不合脚，只有自己知道。</p>
<h2 id="一、搭建远程服务器"><a href="#一、搭建远程服务器" class="headerlink" title="一、搭建远程服务器"></a>一、搭建远程服务器</h2><p>登录<a href="http://aws.amazon.com/cn/" target="_blank" rel="external">亚马逊(http://aws.amazon.com/cn/)</a>，没有账号的请自行注册</p>
<ol>
<li><p>选择<code>免费试用Amazon EC2</code><br><img src="http://7xp7q7.com1.z0.glb.clouddn.com/image/aws/step.png" alt=""></p>
</li>
<li><p>选择系统映像，这里选择Amazon Liunx，当然也可以选择其他的，但是我用的是Amazon Liunx，然后“下一步”<br>由于我这里单纯是为了但见一个VPN服务器，对配置没多大的要求，所以选择<br><img src="http://7xp7q7.com1.z0.glb.clouddn.com/image/aws/step01.png" alt=""></p>
</li>
<li><p>选择实例类型，然后“下一步”<br><img src="http://7xp7q7.com1.z0.glb.clouddn.com/image/aws/step02.png" alt=""></p>
</li>
<li><p>接下来的“配置实例”，“添加存储”直接用默认设置，点“下一步”即可 </p>
</li>
<li><p>到“标签实例”中，创建密钥标签，内容自定<br><img src="http://7xp7q7.com1.z0.glb.clouddn.com/image/aws/step05.png" alt=""></p>
</li>
<li><p>“配置安全组件”，默认是”SSH”，建议改为”所有流量”，以后也可以改<br><img src="http://7xp7q7.com1.z0.glb.clouddn.com/image/aws/step06.png" alt=""></p>
</li>
<li><p>“审核”页面，点击”启动”按钮，创建新的密钥对，命名之后点击下载，下载好的<code>.pem</code>文件<strong>保存好</strong>，<strong>保存好</strong>，<strong>保存好</strong>，以后通过SSH登录远程服务器要用，完成后就可以启动实例了。<br><img src="http://7xp7q7.com1.z0.glb.clouddn.com/image/aws/step08.png" alt=""></p>
</li>
<li><p>等待一小会儿，刷新控制面板就可以看到正在运行的实例了。</p>
</li>
<li><p>实例我理解为我的远程服务器，可以在界面上操作它的启动、停止、重启和终止，其中重启不会改变公有IP，其他操作都会改变公有IP，所以进行重启之外的操作之后，Shadowsocks的相关配置记得统一变更</p>
</li>
</ol>
<h2 id="二、SSH登录远程服务器并安装相关程序-Shadowsocks"><a href="#二、SSH登录远程服务器并安装相关程序-Shadowsocks" class="headerlink" title="二、SSH登录远程服务器并安装相关程序(Shadowsocks)"></a>二、SSH登录远程服务器并安装相关程序(<em>Shadowsocks</em>)</h2><ol>
<li>右键选中的实例，打开“连接”，弹出信息框<br> <img src="http://7xp7q7.com1.z0.glb.clouddn.com/image/vpn/step11.png" alt=""><br> <img src="http://7xp7q7.com1.z0.glb.clouddn.com/image/aws/step12.png" alt=""></li>
<li><p>打开终端</p>
<ul>
<li><p>首先需要使密钥不公开可见</p>
<pre><code>chmod 400 &lt;*.pem文件路径&gt;
</code></pre></li>
<li><p>SSH登录（命令可以复制上图中的示例）</p>
<pre><code>ssh -i &lt;*.pem文件路径&gt; ec2-user@&lt;服务器公有DNS&gt;
</code></pre><p>  根据提示输入<code>yes</code>即可连接远程服务器。</p>
</li>
</ul>
</li>
<li><p>依次执行如下三条命令安装相关的软件</p>
<pre><code>$ sudo yum install -y python-setuptools
$ sudo easy_install pip
$ sudo pip install shadowsocks
</code></pre></li>
<li><p>软件安装完成，添加配置文件  </p>
<ul>
<li><p>创建文件夹</p>
<pre><code>mkdir /etc/configfile
</code></pre></li>
<li><p>vim编辑config.json(vim是一种文本编辑器感兴趣的去<a href="http://www.jianshu.com/p/bcbe916f97e1" target="_blank" rel="external">这里</a>了解一下)</p>
<pre><code>sudo vim /etc/configfile/config.json
</code></pre><p>  粘贴以下内容</p>
<pre><code>{
    &quot;server_port”:8081,
    &quot;password”:”123456789”,
    &quot;timeout&quot;:300,
    &quot;method&quot;:&quot;aes-256-cfb&quot;,
}
</code></pre><p>  &nbsp;&nbsp;&nbsp;&nbsp;其中，端口号<code>server_port</code>根据自己情况制定（1024 ~ 65535），密码<code>password</code>自己制定并要牢记，加密方式<code>method</code>默认选<code>aes-256-cfb</code>，这些信息后边用户在终端登录要用到，超时时间<code>timeout</code>自己指定。<br>  &nbsp;&nbsp;&nbsp;&nbsp;另外，如果想给不同端口设置不同密码，参照下边的格式即可</p>
<pre><code>{
    &quot;port_password&quot;:{
         &quot;8088&quot;:&quot;password1&quot;,
         &quot;8089&quot;:&quot;password2&quot;
    },
    &quot;method&quot;:&quot;aes-256-cfb&quot;,
    &quot;timeout&quot;:300
}
</code></pre><p>  编辑完成后按<code>Esc</code>退出编辑模式（回到命令模式）<br>  输入<code>:wq</code>（保存并退出编辑）</p>
</li>
<li><p>启动shadowsocks</p>
<pre><code>sudo ssserver -c /etc/configfile/config.json -d start
</code></pre><blockquote>
<p><strong>备注:</strong><br>笔者在执行上述命令时遇到命令不被识别的问题，所以最终只能使用命令全路径<br>ssserver路径通过<code>which ssserver</code>命令可以拿到<br>所以最终我的命令是：<br>/usr/bin/sudo /usr/local/bin/ssserver -c /etc/configfile/config.json -d start </p>
</blockquote>
</li>
</ul>
</li>
</ol>
<h2 id="三、本机安装Shadowsocks客户端"><a href="#三、本机安装Shadowsocks客户端" class="headerlink" title="三、本机安装Shadowsocks客户端"></a>三、本机安装Shadowsocks客户端</h2><ul>
<li>本机安装Shadowsocks客户端，看这里<a href="http://www.godusevpn.mobi/wiki.html" target="_blank" rel="external">http://www.godusevpn.mobi/wiki.html</a>就够了，虽然不买他们的服务，但是看看他们的教程还是可以的嘛🤗🤗🤗</li>
</ul>
<ul>
<li>（以Mac为例）按照下图，打开Shadowsocks菜单<br><em><code>菜单</code></em> -&gt; <em><code>服务器</code></em> -&gt; <em><code>打开服务器设定</code></em><br><img src="http://7xp7q7.com1.z0.glb.clouddn.com/image/aws/shadowsocksserver.png" alt=""></li>
<li>配置自己的服务器IP、端口号，加密方式<code>aes-256-cfb</code>,密码<br><img src="http://7xp7q7.com1.z0.glb.clouddn.com/image/aws/shadowsockssetting.png" alt=""></li>
<li>配置完成之后再打开Shadowsocks菜单<br><em><code>菜单</code></em> -&gt; <em><code>服务器</code></em> -&gt; 勾选刚才添加的项目</li>
</ul>
<h2 id="四、Google一下"><a href="#四、Google一下" class="headerlink" title="四、Google一下"></a>四、Google一下</h2><p>到这里，你应该就可以顺利的访问下边的网站了</p>
<p><a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a><br><a href="http://www.facebook.com" target="_blank" rel="external">http://www.facebook.com</a><br><a href="http://www.twitter.com" target="_blank" rel="external">http://www.twitter.com</a><br><img src="http://7xp7q7.com1.z0.glb.clouddn.com/image/aws/google.png" alt=""></p>
<h2 id="五、设置Shadowsocks开机启动"><a href="#五、设置Shadowsocks开机启动" class="headerlink" title="五、设置Shadowsocks开机启动"></a>五、设置Shadowsocks开机启动</h2><p>有的时候我们需要重启服务器，为避免每次重启服务器之后手动启动Shadowsocks，我们可以把它设置为开机启动</p>
<pre><code>sudo vi /etc/rc.local
</code></pre><p>在<code>rc.local</code>文件末尾添加如下代码</p>
<pre><code>sudo ssserver -c /etc/configfile/config.json -d start
</code></pre><blockquote>
<p><strong>备注：</strong><br>如果上边也曾遇到过命令不识别的问题，这里也需要拼全路径的<br>/usr/bin/sudo /usr/local/bin/ssserver -c /etc/configfile/config.json -d start</p>
</blockquote>
<h2 id="六、如何避免收费"><a href="#六、如何避免收费" class="headerlink" title="六、如何避免收费"></a>六、如何避免收费</h2><p>虽说我们选的是免费的套餐，但是仍有可能一个不小心信用卡上就多了一笔账单<br>有两种情况：  </p>
<ol>
<li><p>套餐过期继续使用  </p>
<p> 所以记得到期的时间，如果不想产生费用，最简单粗暴的方法就是关停使用中的实例，实例终止之后系统会在一定时间内清理掉你得实例  </p>
<p> <img src="http://7xp7q7.com1.z0.glb.clouddn.com/image/aws/terminal.png" alt=""></p>
</li>
<li><p>因为你可能在不知情的情况下超出套餐用量  </p>
<p> 针对这个问题，好在有CloudWatch，通过CloudWatch我们可以<strong><em>设定警告</em></strong></p>
<ul>
<li><p>首先我们看一下AWS免费套餐的标准</p>
<p><img src="http://7xp7q7.com1.z0.glb.clouddn.com/image/aws/awsfree.png" alt=""></p>
</li>
<li><p>对于不做其他用途，仅用于搭建VPN平台的我来说，流量、存储什么的足够了，所以我主要给I/O设置了警报，当然可以结合实际情况，自定义警报类型  </p>
</li>
<li><p>打开<a href="https://ap-northeast-1.console.aws.amazon.com/cloudwatch" target="_blank" rel="external">CloudWatch</a></p>
</li>
<li><p>选择<code>警报</code>-&gt;<code>创建警报</code> -&gt; <code>EBS</code> -&gt; <code>勾选监控指标（卷读取操作）</code> -&gt; <code>下一步</code><br>接下来定义警报内容：设置警报阈值，并在通知操作栏中选择通知列表（如果没有，需要新建，包括添加邮箱列表，邮箱确认等一系列步骤，这里不再赘述），最后成功创建警报，警报创建成功后，当指标超过设定的上限时，通知列表中的邮箱会收到来自AWS Notifications发来的警报邮件。</p>
<p><img src="http://7xp7q7.com1.z0.glb.clouddn.com/image/aws/creatalert.png" alt=""></p>
<p><img src="http://7xp7q7.com1.z0.glb.clouddn.com/image/aws/toplevel.png" alt=""></p>
<p>监控不同的指标需要设定不同的警报，所以，再以同样的方法设定<code>卷写入操作</code>的指标监控警报。</p>
</li>
</ul>
</li>
</ol>
<p>通过一系列警报和设置，我们可以提前有所准备，但可能做不到完全避免，同时由于我对AWS也只接触了一天的时间，CloudWatch肯定还有更多强大的功能没有被我发现，所以还有很多工作要做，也希望同学们有新的发现及时分享给大家。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里记录一下我是如何在Mac上借助AWS(Amazon Web Services)&lt;strong&gt;免费&lt;/strong&gt;搭建VPN服务器的&lt;br&gt;
    
    </summary>
    
    
      <category term="VPN" scheme="http://yongqianvip.github.io/tags/VPN/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发技巧</title>
    <link href="http://yongqianvip.github.io/2016/08/26/iOS_Tips/"/>
    <id>http://yongqianvip.github.io/2016/08/26/iOS_Tips/</id>
    <published>2016-08-26T07:07:25.000Z</published>
    <updated>2016-09-14T02:31:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>iOS开发中的一些列小技巧，总有一个你用得到<br><a id="more"></a></p>
<h3 id="1、UITableView的Group样式下顶部空白处理"><a href="#1、UITableView的Group样式下顶部空白处理" class="headerlink" title="1、UITableView的Group样式下顶部空白处理"></a>1、UITableView的Group样式下顶部空白处理</h3><pre><code>在viewWillAppear里面添加如下代码：
//分组列表头部空白处理
CGRect frame = myTableView.tableHeaderView.frame;
frame.size.height = 0.1;
UIView *headerView = [[UIView alloc] initWithFrame:frame];
[myTableView setTableHeaderView:headerView];
</code></pre><h3 id="2、UITableView的plain样式下，取消区头停滞效果"><a href="#2、UITableView的plain样式下，取消区头停滞效果" class="headerlink" title="2、UITableView的plain样式下，取消区头停滞效果"></a>2、UITableView的plain样式下，取消区头停滞效果</h3><pre><code>-(void)scrollViewDidScroll:(UIScrollView *)scrollView
{
    CGFloat sectionHeaderHeight = sectionHead.height;
    if    (scrollView.contentOffset.y&lt;=sectionHeaderHeight&amp;&amp;scrollView;.contentOffset.y&gt;=0)
    {
        scrollView.contentInset = UIEdgeInsetsMake(-scrollView.contentOffset.y, 0, 0, 0);
    }
    else if(scrollView.contentOffset.y&gt;=sectionHeaderHeight)
    {
        scrollView.contentInset = UIEdgeInsetsMake(-sectionHeaderHeight, 0, 0, 0);
    }
}
</code></pre><h3 id="3、获取某个view所在的控制器"><a href="#3、获取某个view所在的控制器" class="headerlink" title="3、获取某个view所在的控制器"></a>3、获取某个view所在的控制器</h3><pre><code>-(UIViewController *)viewController
{
      UIViewController *viewController = nil;  
      UIResponder *next = self.nextResponder;
      while (next)
      {
        if ([next isKindOfClass:[UIViewController class]])
        {
              viewController = (UIViewController *)next;      
              break;    
        }    
        next = next.nextResponder;  
      } 
    return viewController;
}
</code></pre><h3 id="4、两种方法删除NSUserDefaults所有记录"><a href="#4、两种方法删除NSUserDefaults所有记录" class="headerlink" title="4、两种方法删除NSUserDefaults所有记录"></a>4、两种方法删除NSUserDefaults所有记录</h3><pre><code>//方法一
NSString *appDomain = [[NSBundle mainBundle] bundleIdentifier];
[[NSUserDefaults standardUserDefaults] removePersistentDomainForName:appDomain];


//方法二
-(void)resetDefaults
{
    NSUserDefaults * defs = [NSUserDefaults standardUserDefaults];
    NSDictionary * dict = [defs dictionaryRepresentation];
    for (id key in dict)
    {
        [defs removeObjectForKey:key];
    }
    [defs synchronize];
}
</code></pre><h3 id="5、打印系统所有已注册的字体名称"><a href="#5、打印系统所有已注册的字体名称" class="headerlink" title="5、打印系统所有已注册的字体名称"></a>5、打印系统所有已注册的字体名称</h3><pre><code>void enumerateFonts()
{
    for(NSString *familyName in [UIFont familyNames])
       {
        NSLog(@&quot;%@&quot;,familyName);               
        NSArray *fontNames = [UIFont fontNamesForFamilyName:familyName];       
        for(NSString *fontName in fontNames)
           {
            NSLog(@&quot;\t|- %@&quot;,fontName);
           }
       }
}
</code></pre><h3 id="6、获取图片某一点的颜色"><a href="#6、获取图片某一点的颜色" class="headerlink" title="6、获取图片某一点的颜色"></a>6、获取图片某一点的颜色</h3><pre><code>第一种：
-(NSString *)reverseWordsInString:(NSString *)str
{    
    NSMutableString *newString = [[NSMutableString alloc] initWithCapacity:str.length];
    for (NSInteger i = str.length - 1; i &gt;= 0 ; i --)
    {
        unichar ch = [str characterAtIndex:i];       
        [newString appendFormat:@&quot;%c&quot;, ch];    
    }    
     return newString;
}

//第二种：
- (NSString*)reverseWordsInString:(NSString*)str
{    
     NSMutableString *reverString = [NSMutableString stringWithCapacity:str.length];    
     [str enumerateSubstringsInRange:NSMakeRange(0, str.length) options:NSStringEnumerationReverse | NSStringEnumerationByComposedCharacterSequences  usingBlock:^(NSString *substring, NSRange substringRange, NSRange enclosingRange, BOOL *stop) { 
      [reverString appendString:substring];                         
  }];    
     return reverString;
}
</code></pre><h3 id="7、禁止锁屏"><a href="#7、禁止锁屏" class="headerlink" title="7、禁止锁屏"></a>7、禁止锁屏</h3><pre><code>默认情况下，当设备一段时间没有触控动作时，iOS会锁住屏幕。但有一些应用是不需要锁屏的，比如视频播放器。
[UIApplication sharedApplication].idleTimerDisabled = YES;
或
[[UIApplication sharedApplication] setIdleTimerDisabled:YES];
</code></pre><h3 id="8、模态推出透明界面"><a href="#8、模态推出透明界面" class="headerlink" title="8、模态推出透明界面"></a>8、模态推出透明界面</h3><pre><code>UIViewController *vc = [[UIViewController alloc] init];
UINavigationController *na = [[UINavigationController alloc] initWithRootViewController:vc];

if ([[[UIDevice currentDevice] systemVersion] floatValue] &gt;= 8.0)
{
     na.modalPresentationStyle = UIModalPresentationOverCurrentContext;
}
else
{
     self.modalPresentationStyle=UIModalPresentationCurrentContext;
}

[self presentViewController:na animated:YES completion:nil];
</code></pre><h3 id="9、Xcode调试不显示内存占用"><a href="#9、Xcode调试不显示内存占用" class="headerlink" title="9、Xcode调试不显示内存占用"></a>9、Xcode调试不显示内存占用</h3><pre><code>editSCheme  里面有个选项叫叫做enable zoombie Objects  取消选中
</code></pre><h3 id="10、显示隐藏文件"><a href="#10、显示隐藏文件" class="headerlink" title="10、显示隐藏文件"></a>10、显示隐藏文件</h3><pre><code>//显示
defaults write com.apple.finder AppleShowAllFiles -bool true
killall Finder

//隐藏
defaults write com.apple.finder AppleShowAllFiles -bool false
killall Finder
</code></pre><h3 id="10、iOS跳转到App-Store下载应用评分"><a href="#10、iOS跳转到App-Store下载应用评分" class="headerlink" title="10、iOS跳转到App Store下载应用评分"></a>10、iOS跳转到App Store下载应用评分</h3><pre><code>[[UIApplication sharedApplication] openURL:[NSURL URLWithString:@&quot;itms-apps://itunes.apple.com/WebObjects/MZStore.woa/wa/viewContentsUserReviews?type=Purple+Software&amp;id=APPID&quot;]];
</code></pre><h3 id="11、iOS-获取汉字的拼音"><a href="#11、iOS-获取汉字的拼音" class="headerlink" title="11、iOS 获取汉字的拼音"></a>11、iOS 获取汉字的拼音</h3><pre><code>+ (NSString *)transform:(NSString *)chinese
{    
    //将NSString装换成NSMutableString 
    NSMutableString *pinyin = [chinese mutableCopy];    
    //将汉字转换为拼音(带音标)    
    CFStringTransform((__bridge CFMutableStringRef)pinyin, NULL, kCFStringTransformMandarinLatin, NO);    
    NSLog(@&quot;%@&quot;, pinyin);    
    //去掉拼音的音标    
    CFStringTransform((__bridge CFMutableStringRef)pinyin, NULL, kCFStringTransformStripCombiningMarks, NO);    
    NSLog(@&quot;%@&quot;, pinyin);    
    //返回最近结果    
    return pinyin;
 }
</code></pre><h3 id="12、手动更改iOS状态栏的颜色"><a href="#12、手动更改iOS状态栏的颜色" class="headerlink" title="12、手动更改iOS状态栏的颜色"></a>12、手动更改iOS状态栏的颜色</h3><pre><code>- (void)setStatusBarBackgroundColor:(UIColor *)color
{
    UIView *statusBar = [[[UIApplication sharedApplication] valueForKey:@&quot;statusBarWindow&quot;] valueForKey:@&quot;statusBar&quot;];

    if ([statusBar respondsToSelector:@selector(setBackgroundColor:)])
    {
        statusBar.backgroundColor = color;    
    }
}
</code></pre><h3 id="13、判断当前ViewController是push还是present的方式显示的"><a href="#13、判断当前ViewController是push还是present的方式显示的" class="headerlink" title="13、判断当前ViewController是push还是present的方式显示的"></a>13、判断当前ViewController是push还是present的方式显示的</h3><pre><code>NSArray *viewcontrollers=self.navigationController.viewControllers;

if (viewcontrollers.count &gt; 1)
{
    if ([viewcontrollers objectAtIndex:viewcontrollers.count - 1] == self)
    {
        //push方式
       [self.navigationController popViewControllerAnimated:YES];
    }
}
else
{
    //present方式
    [self dismissViewControllerAnimated:YES completion:nil];
}
</code></pre><h3 id="14、获取实际使用的LaunchImage图片"><a href="#14、获取实际使用的LaunchImage图片" class="headerlink" title="14、获取实际使用的LaunchImage图片"></a>14、获取实际使用的LaunchImage图片</h3><pre><code>- (NSString *)getLaunchImageName
{
    CGSize viewSize = self.window.bounds.size;
    // 竖屏    
    NSString *viewOrientation = @&quot;Portrait&quot;;  
    NSString *launchImageName = nil;    
    NSArray* imagesDict = [[[NSBundle mainBundle] infoDictionary] valueForKey:@&quot;UILaunchImages&quot;];
    for (NSDictionary* dict in imagesDict)
    {
        CGSize imageSize = CGSizeFromString(dict[@&quot;UILaunchImageSize&quot;]);
        if (CGSizeEqualToSize(imageSize, viewSize) &amp;&amp; [viewOrientation isEqualToString:dict[@&quot;UILaunchImageOrientation&quot;]])
        {
            launchImageName = dict[@&quot;UILaunchImageName&quot;];        
        }    
    }    
    return launchImageName;
}
</code></pre><h3 id="15、iOS在当前屏幕获取第一响应"><a href="#15、iOS在当前屏幕获取第一响应" class="headerlink" title="15、iOS在当前屏幕获取第一响应"></a>15、iOS在当前屏幕获取第一响应</h3><pre><code>UIWindow * keyWindow = [[UIApplication sharedApplication] keyWindow];
UIView * firstResponder = [keyWindow performSelector:@selector(firstResponder)];
</code></pre><h3 id="16、判断对象是否遵循了某协议"><a href="#16、判断对象是否遵循了某协议" class="headerlink" title="16、判断对象是否遵循了某协议"></a>16、判断对象是否遵循了某协议</h3><pre><code>if ([self.selectedController conformsToProtocol:@protocol(RefreshPtotocol)])
{
     [self.selectedController performSelector:@selector(onTriggerRefresh)];
}
</code></pre><h3 id="17、判断view是不是指定视图的子视图"><a href="#17、判断view是不是指定视图的子视图" class="headerlink" title="17、判断view是不是指定视图的子视图"></a>17、判断view是不是指定视图的子视图</h3><pre><code>BOOL isView = [textView isDescendantOfView:self.view];
</code></pre><h3 id="18、NSArray-快速求总和-最大值-最小值-和-平均值"><a href="#18、NSArray-快速求总和-最大值-最小值-和-平均值" class="headerlink" title="18、NSArray 快速求总和 最大值 最小值 和 平均值"></a>18、NSArray 快速求总和 最大值 最小值 和 平均值</h3><pre><code>NSArray *array = [NSArray arrayWithObjects:@&quot;2.0&quot;, @&quot;2.3&quot;, @&quot;3.0&quot;, @&quot;4.0&quot;, @&quot;10&quot;, nil];
CGFloat sum = [[array valueForKeyPath:@&quot;@sum.floatValue&quot;] floatValue];
CGFloat avg = [[array valueForKeyPath:@&quot;@avg.floatValue&quot;] floatValue];
CGFloat max =[[array valueForKeyPath:@&quot;@max.floatValue&quot;] floatValue];
CGFloat min =[[array valueForKeyPath:@&quot;@min.floatValue&quot;] floatValue];
NSLog(@&quot;%f\n%f\n%f\n%f&quot;,sum,avg,max,min);
</code></pre><h3 id="19、修改UITextField中Placeholder的文字颜色"><a href="#19、修改UITextField中Placeholder的文字颜色" class="headerlink" title="19、修改UITextField中Placeholder的文字颜色"></a>19、修改UITextField中Placeholder的文字颜色</h3><pre><code>[textField setValue:[UIColor redColor] forKeyPath:@&quot;_placeholderLabel.textColor&quot;];
</code></pre><h3 id="20、关于NSDateFormatter的格式"><a href="#20、关于NSDateFormatter的格式" class="headerlink" title="20、关于NSDateFormatter的格式"></a>20、关于NSDateFormatter的格式</h3><pre><code>G: 公元时代，例如AD公元
yy: 年的后2位
yyyy: 完整年
MM: 月，显示为1-12
MMM: 月，显示为英文月份简写,如 Jan
MMMM: 月，显示为英文月份全称，如 Janualy
dd: 日，2位数表示，如02
d: 日，1-2位显示，如 2
EEE: 简写星期几，如Sun
EEEE: 全写星期几，如Sunday
aa: 上下午，AM/PM
H: 时，24小时制，0-23
K：时，12小时制，0-11
m: 分，1-2位
mm: 分，2位
s: 秒，1-2位
ss: 秒，2位
S: 毫秒
</code></pre><h3 id="21、获取一个类的所有子类"><a href="#21、获取一个类的所有子类" class="headerlink" title="21、获取一个类的所有子类"></a>21、获取一个类的所有子类</h3><pre><code>+ (NSArray *) allSubclasses
{
    Class myClass = [self class];
    NSMutableArray *mySubclasses = [NSMutableArray array];
    unsigned int numOfClasses;
    Class *classes = objc_copyClassList(&amp;numOfClasses;);
    for (unsigned int ci = 0; ci &lt; numOfClasses; ci++)
    {
        Class superClass = classes[ci];
        do{
            superClass = class_getSuperclass(superClass);
        } while (superClass &amp;&amp; superClass != myClass);

        if (superClass)
        {
            [mySubclasses addObject: classes[ci]];
        }
    }
    free(classes);
    return mySubclasses;
}
</code></pre><h3 id="22、监测IOS设备是否设置了代理，需要CFNetwork-framework"><a href="#22、监测IOS设备是否设置了代理，需要CFNetwork-framework" class="headerlink" title="22、监测IOS设备是否设置了代理，需要CFNetwork.framework"></a>22、监测IOS设备是否设置了代理，需要CFNetwork.framework</h3><pre><code>NSDictionary *proxySettings = (__bridge NSDictionary *)(CFNetworkCopySystemProxySettings());
NSArray *proxies = (__bridge NSArray *)(CFNetworkCopyProxiesForURL((__bridge CFURLRef _Nonnull)([NSURL URLWithString:@&quot;http://www.baidu.com&quot;]), (__bridge CFDictionaryRef _Nonnull)(proxySettings)));
NSLog(@&quot;\n%@&quot;,proxies);

NSDictionary *settings = proxies[0];
NSLog(@&quot;%@&quot;,[settings objectForKey:(NSString *)kCFProxyHostNameKey]);
NSLog(@&quot;%@&quot;,[settings objectForKey:(NSString *)kCFProxyPortNumberKey]);
NSLog(@&quot;%@&quot;,[settings objectForKey:(NSString *)kCFProxyTypeKey]);

if ([[settings objectForKey:(NSString *)kCFProxyTypeKey] isEqualToString:@&quot;kCFProxyTypeNone&quot;])
{
     NSLog(@&quot;没代理&quot;);
}
else
{
     NSLog(@&quot;设置了代理&quot;);
}
</code></pre><h3 id="23、阿拉伯数字转中文格式"><a href="#23、阿拉伯数字转中文格式" class="headerlink" title="23、阿拉伯数字转中文格式"></a>23、阿拉伯数字转中文格式</h3><pre><code>+(NSString *)translation:(NSString *)arebic
{  
    NSString *str = arebic;
    NSArray *arabic_numerals = @[@&quot;1&quot;,@&quot;2&quot;,@&quot;3&quot;,@&quot;4&quot;,@&quot;5&quot;,@&quot;6&quot;,@&quot;7&quot;,@&quot;8&quot;,@&quot;9&quot;,@&quot;0&quot;];
    NSArray *chinese_numerals = @[@&quot;一&quot;,@&quot;二&quot;,@&quot;三&quot;,@&quot;四&quot;,@&quot;五&quot;,@&quot;六&quot;,@&quot;七&quot;,@&quot;八&quot;,@&quot;九&quot;,@&quot;零&quot;];
    NSArray *digits = @[@&quot;个&quot;,@&quot;十&quot;,@&quot;百&quot;,@&quot;千&quot;,@&quot;万&quot;,@&quot;十&quot;,@&quot;百&quot;,@&quot;千&quot;,@&quot;亿&quot;,@&quot;十&quot;,@&quot;百&quot;,@&quot;千&quot;,@&quot;兆&quot;];
    NSDictionary *dictionary = [NSDictionary dictionaryWithObjects:chinese_numerals forKeys:arabic_numerals];

    NSMutableArray *sums = [NSMutableArray array];
    for (int i = 0; i &lt; str.length; i ++) {
        NSString *substr = [str substringWithRange:NSMakeRange(i, 1)];
        NSString *a = [dictionary objectForKey:substr];
        NSString *b = digits[str.length -i-1];
        NSString *sum = [a stringByAppendingString:b];
        if ([a isEqualToString:chinese_numerals[9]])
        {
            if([b isEqualToString:digits[4]] || [b isEqualToString:digits[8]])
            {
                sum = b;
                if ([[sums lastObject] isEqualToString:chinese_numerals[9]])
                {
                    [sums removeLastObject];
                }
            }else
            {
                sum = chinese_numerals[9];
            }

            if ([[sums lastObject] isEqualToString:sum])
            {
                continue;
            }
        }

        [sums addObject:sum];
    }

    NSString *sumStr = [sums componentsJoinedByString:@&quot;&quot;];
    NSString *chinese = [sumStr substringToIndex:sumStr.length-1];
    NSLog(@&quot;%@&quot;,str);
    NSLog(@&quot;%@&quot;,chinese);
    return chinese;
}
</code></pre><h3 id="24、Base64编码与NSString对象或NSData对象的转换"><a href="#24、Base64编码与NSString对象或NSData对象的转换" class="headerlink" title="24、Base64编码与NSString对象或NSData对象的转换"></a>24、Base64编码与NSString对象或NSData对象的转换</h3><pre><code>// Create NSData object
NSData *nsdata = [@&quot;iOS Developer Tips encoded in Base64&quot;
  dataUsingEncoding:NSUTF8StringEncoding];

// Get NSString from NSData object in Base64
NSString *base64Encoded = [nsdata base64EncodedStringWithOptions:0];

// Print the Base64 encoded string
NSLog(@&quot;Encoded: %@&quot;, base64Encoded);

// Let&apos;s go the other way...

// NSData from the Base64 encoded str
NSData *nsdataFromBase64String = [[NSData alloc]
  initWithBase64EncodedString:base64Encoded options:0];

// Decoded NSString from the NSData
NSString *base64Decoded = [[NSString alloc]
  initWithData:nsdataFromBase64String encoding:NSUTF8StringEncoding];
NSLog(@&quot;Decoded: %@&quot;, base64Decoded);
</code></pre><h3 id="25、取消UICollectionView的隐式动画"><a href="#25、取消UICollectionView的隐式动画" class="headerlink" title="25、取消UICollectionView的隐式动画"></a>25、取消UICollectionView的隐式动画</h3><p>UICollectionView在reloadItems的时候，默认会附加一个隐式的fade动画，有时候很讨厌，尤其是当你的cell是复合cell的情况下(比如cell使用到了UIStackView)。<br>下面几种方法都可以帮你去除这些动画</p>
<pre><code>//方法一
[UIView performWithoutAnimation:^{
    [collectionView reloadItemsAtIndexPaths:@[[NSIndexPath indexPathForItem:index inSection:0]]];
}];

//方法二
[UIView animateWithDuration:0 animations:^{
    [collectionView performBatchUpdates:^{
        [collectionView reloadItemsAtIndexPaths:@[[NSIndexPath indexPathForItem:index inSection:0]]];
    } completion:nil];
}];

//方法三
[UIView setAnimationsEnabled:NO];
[self.trackPanel performBatchUpdates:^{
    [collectionView reloadItemsAtIndexPaths:@[[NSIndexPath indexPathForItem:index inSection:0]]];
} completion:^(BOOL finished) {
    [UIView setAnimationsEnabled:YES];
}];
</code></pre><h3 id="26、让Xcode的控制台支持LLDB类型的打印"><a href="#26、让Xcode的控制台支持LLDB类型的打印" class="headerlink" title="26、让Xcode的控制台支持LLDB类型的打印"></a>26、让Xcode的控制台支持LLDB类型的打印</h3><pre><code>打开终端输入三条命令:
touch ~/.lldbinit
echo display @import UIKit &gt;&gt; ~/.lldbinit
echo target stop-hook add -o \&quot;target stop-hook disable\&quot; &gt;&gt; ~/.lldbinit
</code></pre><h3 id="27、CocoaPods-pod-install-pod-update更新慢的问题"><a href="#27、CocoaPods-pod-install-pod-update更新慢的问题" class="headerlink" title="27、CocoaPods pod install/pod update更新慢的问题"></a>27、CocoaPods pod install/pod update更新慢的问题</h3><pre><code>pod install --verbose --no-repo-update 
pod update --verbose --no-repo-update
如果不加后面的参数，默认会升级CocoaPods的spec仓库，加一个参数可以省略这一步，然后速度就会提升不少
</code></pre><h3 id="28、UIImage-占用内存大小"><a href="#28、UIImage-占用内存大小" class="headerlink" title="28、UIImage 占用内存大小"></a>28、UIImage 占用内存大小</h3><pre><code>UIImage *image = [UIImage imageNamed:@&quot;aa&quot;];
NSUInteger size  = CGImageGetHeight(image.CGImage) * CGImageGetBytesPerRow(image.CGImage);
</code></pre><h3 id="29、GCD-timer定时器"><a href="#29、GCD-timer定时器" class="headerlink" title="29、GCD timer定时器"></a>29、GCD timer定时器</h3><pre><code>dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
dispatch_source_t timer = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, 0, 0,queue);
dispatch_source_set_timer(timer,dispatch_walltime(NULL, 0),1.0*NSEC_PER_SEC, 0); //每秒执行
dispatch_source_set_event_handler(timer, ^{
    //@&quot;倒计时结束，关闭&quot;
    dispatch_source_cancel(timer); 
    dispatch_async(dispatch_get_main_queue(), ^{

    });
});
dispatch_resume(timer);
</code></pre><h3 id="30、图片上绘制文字-写一个UIImage的category"><a href="#30、图片上绘制文字-写一个UIImage的category" class="headerlink" title="30、图片上绘制文字 写一个UIImage的category"></a>30、图片上绘制文字 写一个UIImage的category</h3><pre><code>- (UIImage *)imageWithTitle:(NSString *)title fontSize:(CGFloat)fontSize
{
    //画布大小
    CGSize size=CGSizeMake(self.size.width,self.size.height);
    //创建一个基于位图的上下文
    UIGraphicsBeginImageContextWithOptions(size,NO,0.0);//opaque:NO  scale:0.0

    [self drawAtPoint:CGPointMake(0.0,0.0)];

    //文字居中显示在画布上
    NSMutableParagraphStyle* paragraphStyle = [[NSParagraphStyle defaultParagraphStyle] mutableCopy];
    paragraphStyle.lineBreakMode = NSLineBreakByCharWrapping;
    paragraphStyle.alignment=NSTextAlignmentCenter;//文字居中

    //计算文字所占的size,文字居中显示在画布上
    CGSize sizeText=[title boundingRectWithSize:self.size options:NSStringDrawingUsesLineFragmentOrigin
                                     attributes:@{NSFontAttributeName:[UIFont systemFontOfSize:fontSize]}context:nil].size;
    CGFloat width = self.size.width;
    CGFloat height = self.size.height;

    CGRect rect = CGRectMake((width-sizeText.width)/2, (height-sizeText.height)/2, sizeText.width, sizeText.height);
    //绘制文字
    [title drawInRect:rect withAttributes:@{ NSFontAttributeName:[UIFont systemFontOfSize:fontSize],NSForegroundColorAttributeName:[ UIColor whiteColor],NSParagraphStyleAttributeName:paragraphStyle}];

    //返回绘制的新图形
    UIImage *newImage= UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    return newImage;
}
</code></pre><h3 id="31、查找一个视图的所有子视图"><a href="#31、查找一个视图的所有子视图" class="headerlink" title="31、查找一个视图的所有子视图"></a>31、查找一个视图的所有子视图</h3><pre><code>- (NSMutableArray *)allSubViewsForView:(UIView *)view
{
    NSMutableArray *array = [NSMutableArray arrayWithCapacity:0];
    for (UIView *subView in view.subviews)
    {
        [array addObject:subView];
        if (subView.subviews.count &gt; 0)
        {
            [array addObjectsFromArray:[self allSubViewsForView:subView]];
        }
    }
    return array;
}
</code></pre><h3 id="32、计算文件大小"><a href="#32、计算文件大小" class="headerlink" title="32、计算文件大小"></a>32、计算文件大小</h3><pre><code>//文件大小
- (long long)fileSizeAtPath:(NSString *)path
{
    NSFileManager *fileManager = [NSFileManager defaultManager];

    if ([fileManager fileExistsAtPath:path])
    {
        long long size = [fileManager attributesOfItemAtPath:path error:nil].fileSize;
        return size;
    }

    return 0;
}

//文件夹大小
- (long long)folderSizeAtPath:(NSString *)path
{
    NSFileManager *fileManager = [NSFileManager defaultManager];

    long long folderSize = 0;

    if ([fileManager fileExistsAtPath:path])
    {
        NSArray *childerFiles = [fileManager subpathsAtPath:path];
        for (NSString *fileName in childerFiles)
        {
            NSString *fileAbsolutePath = [path stringByAppendingPathComponent:fileName];
            if ([fileManager fileExistsAtPath:fileAbsolutePath])
            {
                long long size = [fileManager attributesOfItemAtPath:fileAbsolutePath error:nil].fileSize;
                folderSize += size;
            }
        }
    }

    return folderSize;
}
</code></pre><h3 id="33、UIView设置部分圆角"><a href="#33、UIView设置部分圆角" class="headerlink" title="33、UIView设置部分圆角"></a>33、UIView设置部分圆角</h3><p>你是不是也遇到过这样的问题，一个button或者label，只要右边的两个角圆角，或者只要一个圆角。该怎么办呢。这就需要图层蒙版来帮助我们了</p>
<pre><code>CGRect rect = view.bounds;
CGSize radio = CGSizeMake(30, 30);//圆角尺寸
UIRectCorner corner = UIRectCornerTopLeft|UIRectCornerTopRight;//这只圆角位置
UIBezierPath *path = [UIBezierPath bezierPathWithRoundedRect:rect byRoundingCorners:corner cornerRadii:radio];
CAShapeLayer *masklayer = [[CAShapeLayer alloc]init];//创建shapelayer
masklayer.frame = view.bounds;
masklayer.path = path.CGPath;//设置路径
view.layer.mask = masklayer;
</code></pre><h3 id="34、取上整与取下整"><a href="#34、取上整与取下整" class="headerlink" title="34、取上整与取下整"></a>34、取上整与取下整</h3><pre><code>floor(x),有时候也写做Floor(x)，其功能是“下取整”，即取不大于x的最大整数 例如：
x=3.14，floor(x)=3
y=9.99999，floor(y)=9

与floor函数对应的是ceil函数，即上取整函数。

ceil函数的作用是求不小于给定实数的最小整数。
ceil(2)=ceil(1.2)=cei(1.5)=2.00

floor函数与ceil函数的返回值均为double型
</code></pre><h3 id="35、计算字符串字符长度，一个汉字算两个字符"><a href="#35、计算字符串字符长度，一个汉字算两个字符" class="headerlink" title="35、计算字符串字符长度，一个汉字算两个字符"></a>35、计算字符串字符长度，一个汉字算两个字符</h3><pre><code>//方法一：
- (int)convertToInt:(NSString*)strtemp
{
    int strlength = 0;
    char* p = (char*)[strtemp cStringUsingEncoding:NSUnicodeStringEncoding];
    for (int i=0 ; i&lt;[strtemp lengthOfBytesUsingEncoding:NSUnicodeStringEncoding] ;i++)
    {
        if (*p)
        {
            p++;
            strlength++;
        }
        else
        {
            p++;
        }

    }
    return strlength;
}

//方法二：
-(NSUInteger) unicodeLengthOfString: (NSString *) text
{
    NSUInteger asciiLength = 0;
    for (NSUInteger i = 0; i &lt; text.length; i++)
    {
        unichar uc = [text characterAtIndex: i];
        asciiLength += isascii(uc) ? 1 : 2;
    }
    return asciiLength;
}
</code></pre><h3 id="36、给UIView设置图片"><a href="#36、给UIView设置图片" class="headerlink" title="36、给UIView设置图片"></a>36、给UIView设置图片</h3><pre><code>UIImage *image = [UIImage imageNamed:@&quot;image&quot;];
self.MYView.layer.contents = (__bridge id _Nullable)(image.CGImage);
self.MYView.layer.contentsRect = CGRectMake(0, 0, 0.5, 0.5);
</code></pre><h3 id="37、防止scrollView手势覆盖侧滑手势"><a href="#37、防止scrollView手势覆盖侧滑手势" class="headerlink" title="37、防止scrollView手势覆盖侧滑手势"></a>37、防止scrollView手势覆盖侧滑手势</h3><pre><code>[scrollView.panGestureRecognizerrequireGestureRecognizerToFail:self.navigationController.interactivePopGestureRecognizer];
</code></pre><h3 id="38、去掉导航栏返回的back标题"><a href="#38、去掉导航栏返回的back标题" class="headerlink" title="38、去掉导航栏返回的back标题"></a>38、去掉导航栏返回的back标题</h3><pre><code>[[UIBarButtonItemappearance]setBackButtonTitlePositionAdjustment:UIOffsetMake(0, -60)forBarMetrics:UIBarMetricsDefault];
</code></pre><h3 id="39、字符串中是否含有中文"><a href="#39、字符串中是否含有中文" class="headerlink" title="39、字符串中是否含有中文"></a>39、字符串中是否含有中文</h3><pre><code>+ (BOOL)checkIsChinese:(NSString *)string
{
    for (int i=0; i&lt;string.length; i++)
    {
        unichar ch = [string characterAtIndex:i];
        if (0x4E00 &lt;= ch  &amp;&amp; ch &lt;= 0x9FA5)
        {
            return YES;
        }
    }
    return NO;
}
</code></pre><h3 id="40、dispatch-group的使用"><a href="#40、dispatch-group的使用" class="headerlink" title="40、dispatch_group的使用"></a>40、dispatch_group的使用</h3><pre><code>dispatch_group_t dispatchGroup = dispatch_group_create();
    dispatch_group_enter(dispatchGroup);
    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(1 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
        NSLog(@&quot;第一个请求完成&quot;);
        dispatch_group_leave(dispatchGroup);
    });

    dispatch_group_enter(dispatchGroup);

    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(10 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
        NSLog(@&quot;第二个请求完成&quot;);
        dispatch_group_leave(dispatchGroup);
    });

    dispatch_group_notify(dispatchGroup, dispatch_get_main_queue(), ^(){
        NSLog(@&quot;请求完成&quot;);
    });
</code></pre><h3 id="41、UITextField每四位加一个空格-实现代理"><a href="#41、UITextField每四位加一个空格-实现代理" class="headerlink" title="41、UITextField每四位加一个空格,实现代理"></a>41、UITextField每四位加一个空格,实现代理</h3><pre><code>- (BOOL)textField:(UITextField *)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString *)string
{
    // 四位加一个空格
    if ([string isEqualToString:@&quot;&quot;])
    {
        // 删除字符
        if ((textField.text.length - 2) % 5 == 0)
        {
            textField.text = [textField.text substringToIndex:textField.text.length - 1];
        }
        return YES;
    }
    else
    {
        if (textField.text.length % 5 == 0)
        {
            textField.text = [NSString stringWithFormat:@&quot;%@ &quot;, textField.text];
        }
    }
    return YES;
}
</code></pre><h3 id="42、获取私有属性和成员变量-import"><a href="#42、获取私有属性和成员变量-import" class="headerlink" title="42、获取私有属性和成员变量 #import "></a>42、获取私有属性和成员变量 #import <objc runtime.h=""></objc></h3><pre><code>//获取私有属性 比如设置UIDatePicker的字体颜色
- (void)setTextColor
{
    //获取所有的属性，去查看有没有对应的属性
    unsigned int count = 0;
    objc_property_t *propertys = class_copyPropertyList([UIDatePicker class], &amp;count);
    for(int i = 0;i &lt; count;i ++)
    {
        //获得每一个属性
        objc_property_t property = propertys[i];
        //获得属性对应的nsstring
        NSString *propertyName = [NSString stringWithCString:property_getName(property) encoding:NSUTF8StringEncoding];
        //输出打印看对应的属性
        NSLog(@&quot;propertyname = %@&quot;,propertyName);
        if ([propertyName isEqualToString:@&quot;textColor&quot;])
        {
            [datePicker setValue:[UIColor whiteColor] forKey:propertyName];
        }
    }
}

//获得成员变量 比如修改UIAlertAction的按钮字体颜色
    unsigned int count = 0;
    Ivar *ivars = class_copyIvarList([UIAlertAction class], &amp;count);
    for(int i =0;i &lt; count;i ++)
    {
        Ivar ivar = ivars[i];
        NSString *ivarName = [NSString stringWithCString:ivar_getName(ivar) encoding:NSUTF8StringEncoding];
        NSLog(@&quot;uialertion.ivarName = %@&quot;,ivarName);
        if ([ivarName isEqualToString:@&quot;_titleTextColor&quot;])
        {
            [alertOk setValue:[UIColor blueColor] forKey:@&quot;titleTextColor&quot;];
            [alertCancel setValue:[UIColor purpleColor] forKey:@&quot;titleTextColor&quot;];
        }
    }
</code></pre><h3 id="43、获取手机安装的应用"><a href="#43、获取手机安装的应用" class="headerlink" title="43、获取手机安装的应用"></a>43、获取手机安装的应用</h3><pre><code>Class c =NSClassFromString(@&quot;LSApplicationWorkspace&quot;);
id s = [(id)c performSelector:NSSelectorFromString(@&quot;defaultWorkspace&quot;)];
NSArray *array = [s performSelector:NSSelectorFromString(@&quot;allInstalledApplications&quot;)];
for (id item in array)
{
    NSLog(@&quot;%@&quot;,[item performSelector:NSSelectorFromString(@&quot;applicationIdentifier&quot;)]);
    //NSLog(@&quot;%@&quot;,[item performSelector:NSSelectorFromString(@&quot;bundleIdentifier&quot;)]);
    NSLog(@&quot;%@&quot;,[item performSelector:NSSelectorFromString(@&quot;bundleVersion&quot;)]);
    NSLog(@&quot;%@&quot;,[item performSelector:NSSelectorFromString(@&quot;shortVersionString&quot;)]);
}
</code></pre><h3 id="44、判断两个日期是否在同一周-写在NSDate的category里面"><a href="#44、判断两个日期是否在同一周-写在NSDate的category里面" class="headerlink" title="44、判断两个日期是否在同一周 写在NSDate的category里面"></a>44、判断两个日期是否在同一周 写在NSDate的category里面</h3><pre><code>- (BOOL)isSameDateWithDate:(NSDate *)date
{
    //日期间隔大于七天之间返回NO
    if (fabs([self timeIntervalSinceDate:date]) &gt;= 7 * 24 *3600)
    {
        return NO;
    }

    NSCalendar *calender = [NSCalendar currentCalendar];
    calender.firstWeekday = 2;//设置每周第一天从周一开始
    //计算两个日期分别为这年第几周
    NSUInteger countSelf = [calender ordinalityOfUnit:NSCalendarUnitWeekday inUnit:NSCalendarUnitYear forDate:self];
    NSUInteger countDate = [calender ordinalityOfUnit:NSCalendarUnitWeekday inUnit:NSCalendarUnitYear forDate:date];

    //相等就在同一周，不相等就不在同一周
    return countSelf == countDate;
}
</code></pre><h3 id="45、应用内打开系统设置界面"><a href="#45、应用内打开系统设置界面" class="headerlink" title="45、应用内打开系统设置界面"></a>45、应用内打开系统设置界面</h3><pre><code>//iOS8之后
[[UIApplication sharedApplication] openURL:[NSURL URLWithString:UIApplicationOpenSettingsURLString]];
//如果App没有添加权限，显示的是设定界面。如果App有添加权限（例如通知），显示的是App的设定界面。

//iOS8之前
//先添加一个url type如下图，在代码中调用如下代码,即可跳转到设置页面的对应项
[[UIApplication sharedApplication] openURL:[NSURL URLWithString:@&quot;prefs:root=WIFI&quot;]];

可选值如下：
About — prefs:root=General&amp;path=About
Accessibility — prefs:root=General&amp;path=ACCESSIBILITY
Airplane Mode On — prefs:root=AIRPLANE_MODE
Auto-Lock — prefs:root=General&amp;path=AUTOLOCK
Brightness — prefs:root=Brightness
Bluetooth — prefs:root=General&amp;path=Bluetooth
Date &amp; Time — prefs:root=General&amp;path=DATE_AND_TIME
FaceTime — prefs:root=FACETIME
General — prefs:root=General
Keyboard — prefs:root=General&amp;path=Keyboard
iCloud — prefs:root=CASTLE
iCloud Storage &amp; Backup — prefs:root=CASTLE&amp;path=STORAGE_AND_BACKUP
International — prefs:root=General&amp;path=INTERNATIONAL
Location Services — prefs:root=LOCATION_SERVICES
Music — prefs:root=MUSIC
Music Equalizer — prefs:root=MUSIC&amp;path=EQ
Music Volume Limit — prefs:root=MUSIC&amp;path=VolumeLimit
Network — prefs:root=General&amp;path=Network
Nike + iPod — prefs:root=NIKE_PLUS_IPOD
Notes — prefs:root=NOTES
Notification — prefs:root=NOTIFICATI*****_ID
Phone — prefs:root=Phone
Photos — prefs:root=Photos
Profile — prefs:root=General&amp;path=ManagedConfigurationList
Reset — prefs:root=General&amp;path=Reset
Safari — prefs:root=Safari
Siri — prefs:root=General&amp;path=Assistant
Sounds — prefs:root=Sounds
Software Update — prefs:root=General&amp;path=SOFTWARE_UPDATE_LINK
Store — prefs:root=STORE
Twitter — prefs:root=TWITTER
Usage — prefs:root=General&amp;path=USAGE
VPN — prefs:root=General&amp;path=Network/VPN
Wallpaper — prefs:root=Wallpaper
Wi-Fi — prefs:root=WIFI
</code></pre><h3 id="46、动画暂停再开始"><a href="#46、动画暂停再开始" class="headerlink" title="46、动画暂停再开始"></a>46、动画暂停再开始</h3><pre><code>-(void)pauseLayer:(CALayer *)layer
{
    CFTimeInterval pausedTime = [layer convertTime:CACurrentMediaTime() fromLayer:nil];
    layer.speed = 0.0;
    layer.timeOffset = pausedTime;
}

-(void)resumeLayer:(CALayer *)layer
{
    CFTimeInterval pausedTime = [layer timeOffset];
    layer.speed = 1.0;
    layer.timeOffset = 0.0;
    layer.beginTime = 0.0;
    CFTimeInterval timeSincePause = [layer convertTime:CACurrentMediaTime() fromLayer:nil] - pausedTime;
    layer.beginTime = timeSincePause;
}
</code></pre><h3 id="47、iOS中数字的格式化"><a href="#47、iOS中数字的格式化" class="headerlink" title="47、iOS中数字的格式化"></a>47、iOS中数字的格式化</h3><pre><code>//通过NSNumberFormatter，同样可以设置NSNumber输出的格式。例如如下代码：
NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
formatter.numberStyle = NSNumberFormatterDecimalStyle;
NSString *string = [formatter stringFromNumber:[NSNumber numberWithInt:123456789]];
NSLog(@&quot;Formatted number string:%@&quot;,string);
//输出结果为：[1223:403] Formatted number string:123,456,789

//其中NSNumberFormatter类有个属性numberStyle，它是一个枚举型，设置不同的值可以输出不同的数字格式。该枚举包括：
typedef NS_ENUM(NSUInteger, NSNumberFormatterStyle) {
    NSNumberFormatterNoStyle = kCFNumberFormatterNoStyle,
    NSNumberFormatterDecimalStyle = kCFNumberFormatterDecimalStyle,
    NSNumberFormatterCurrencyStyle = kCFNumberFormatterCurrencyStyle,
    NSNumberFormatterPercentStyle = kCFNumberFormatterPercentStyle,
    NSNumberFormatterScientificStyle = kCFNumberFormatterScientificStyle,
    NSNumberFormatterSpellOutStyle = kCFNumberFormatterSpellOutStyle
};
//各个枚举对应输出数字格式的效果如下：其中第三项和最后一项的输出会根据系统设置的语言区域的不同而不同。
[1243:403] Formatted number string:123456789
[1243:403] Formatted number string:123,456,789
[1243:403] Formatted number string:￥123,456,789.00
[1243:403] Formatted number string:-539,222,988%
[1243:403] Formatted number string:1.23456789E8
[1243:403] Formatted number string:一亿二千三百四十五万六千七百八十九
</code></pre><h3 id="48、如何获取WebView所有的图片地址，"><a href="#48、如何获取WebView所有的图片地址，" class="headerlink" title="48、如何获取WebView所有的图片地址，"></a>48、如何获取WebView所有的图片地址，</h3><p>在网页加载完成时，通过js获取图片和添加点击的识别方式</p>
<pre><code>//UIWebView
- (void)webViewDidFinishLoad:(UIWebView *)webView
{
    //这里是js，主要目的实现对url的获取
    static  NSString * const jsGetImages =
    @&quot;function getImages(){\
    var objs = document.getElementsByTagName(\&quot;img\&quot;);\
    var imgScr = &apos;&apos;;\
    for(var i=0;i&lt;objs.length;i++){\
    imgScr = imgScr + objs[i].src + &apos;+&apos;;\
    };\
    return imgScr;\
    };&quot;;

    [webView stringByEvaluatingJavaScriptFromString:jsGetImages];//注入js方法
    NSString *urlResult = [webView stringByEvaluatingJavaScriptFromString:@&quot;getImages()&quot;];
    NSArray *urlArray = [NSMutableArray arrayWithArray:[urlResult componentsSeparatedByString:@&quot;+&quot;]];
    //urlResurlt 就是获取到得所有图片的url的拼接；mUrlArray就是所有Url的数组
}

//WKWebView
- (void)webView:(WKWebView *)webView didFinishNavigation:(null_unspecified WKNavigation *)navigation
{
    static  NSString * const jsGetImages =
    @&quot;function getImages(){\
    var objs = document.getElementsByTagName(\&quot;img\&quot;);\
    var imgScr = &apos;&apos;;\
    for(var i=0;i&lt;objs.length;i++){\
    imgScr = imgScr + objs[i].src + &apos;+&apos;;\
    };\
    return imgScr;\
    };&quot;;

    [webView evaluateJavaScript:jsGetImages completionHandler:nil];
    [webView evaluateJavaScript:@&quot;getImages()&quot; completionHandler:^(id _Nullable result, NSError * _Nullable error) {
        NSLog(@&quot;%@&quot;,result);
    }];
}
</code></pre><h3 id="49、获取到webview的高度"><a href="#49、获取到webview的高度" class="headerlink" title="49、获取到webview的高度"></a>49、获取到webview的高度</h3><pre><code>CGFloat height = [[self.webView stringByEvaluatingJavaScriptFromString:@&quot;document.body.offsetHeight&quot;] floatValue];
</code></pre><h3 id="50、navigationBar变为纯透明"><a href="#50、navigationBar变为纯透明" class="headerlink" title="50、navigationBar变为纯透明"></a>50、navigationBar变为纯透明</h3><pre><code>//第一种方法
//导航栏纯透明
[self.navigationBar setBackgroundImage:[UIImage new] forBarMetrics:UIBarMetricsDefault];
//去掉导航栏底部的黑线
self.navigationBar.shadowImage = [UIImage new];

//第二种方法
[[self.navigationBar subviews] objectAtIndex:0].alpha = 0;

//tabbar变为透明
[self.tabBar setBackgroundImage:[UIImage new]];
self.tabBar.shadowImage = [UIImage new];
</code></pre><h3 id="51、navigationBar根据滑动距离的渐变色实现"><a href="#51、navigationBar根据滑动距离的渐变色实现" class="headerlink" title="51、navigationBar根据滑动距离的渐变色实现"></a>51、navigationBar根据滑动距离的渐变色实现</h3><pre><code>//第一种
- (void)scrollViewDidScroll:(UIScrollView *)scrollView
{
    CGFloat offsetToShow = 200.0;//滑动多少就完全显示
    CGFloat alpha = 1 - (offsetToShow - scrollView.contentOffset.y) / offsetToShow;
    [[self.navigationController.navigationBar subviews] objectAtIndex:0].alpha = alpha;
}

//第二种
- (void)scrollViewDidScroll:(UIScrollView *)scrollView
{
    CGFloat offsetToShow = 200.0;
    CGFloat alpha = 1 - (offsetToShow - scrollView.contentOffset.y) / offsetToShow;

    [self.navigationController.navigationBar setShadowImage:[UIImage new]];
    [self.navigationController.navigationBar setBackgroundImage:[self imageWithColor:[[UIColor orangeColor]colorWithAlphaComponent:alpha]] forBarMetrics:UIBarMetricsDefault];
}

//生成一张纯色的图片
- (UIImage *)imageWithColor:(UIColor *)color
{
    CGRect rect = CGRectMake(0.0f, 0.0f, 1.0f, 1.0f);
    UIGraphicsBeginImageContext(rect.size);
    CGContextRef context = UIGraphicsGetCurrentContext();
    CGContextSetFillColorWithColor(context, [color CGColor]);
    CGContextFillRect(context, rect);
    UIImage *theImage = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return theImage;
}
</code></pre><h3 id="52、iOS-开发中一些相关的路径"><a href="#52、iOS-开发中一些相关的路径" class="headerlink" title="52、iOS 开发中一些相关的路径"></a>52、iOS 开发中一些相关的路径</h3><pre><code>模拟器的位置:
/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs 

文档安装位置:
/Applications/Xcode.app/Contents/Developer/Documentation/DocSets

插件保存路径:
~/Library/ApplicationSupport/Developer/Shared/Xcode/Plug-ins

自定义代码段的保存路径:
~/Library/Developer/Xcode/UserData/CodeSnippets/ 
如果找不到CodeSnippets文件夹，可以自己新建一个CodeSnippets文件夹。

描述文件路径
~/Library/MobileDevice/Provisioning Profiles
</code></pre><h3 id="53、navigationItem的BarButtonItem如何紧靠屏幕右边界或者左边界？"><a href="#53、navigationItem的BarButtonItem如何紧靠屏幕右边界或者左边界？" class="headerlink" title="53、navigationItem的BarButtonItem如何紧靠屏幕右边界或者左边界？"></a>53、navigationItem的BarButtonItem如何紧靠屏幕右边界或者左边界？</h3><p>一般情况下，右边的item会和屏幕右侧保持一段距离，下面是通过添加一个负值宽度的固定间距的item来解决，也可以改变宽度实现不同的间隔：</p>
<pre><code>UIImage *img = [[UIImage imageNamed:@&quot;icon_cog&quot;] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];
//宽度为负数的固定间距的系统item
UIBarButtonItem *rightNegativeSpacer = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemFixedSpace target:nil action:nil];
[rightNegativeSpacer setWidth:-15];

UIBarButtonItem *rightBtnItem1 = [[UIBarButtonItem alloc]initWithImage:img style:UIBarButtonItemStylePlain target:self action:@selector(rightButtonItemClicked:)];
UIBarButtonItem *rightBtnItem2 = [[UIBarButtonItem alloc]initWithImage:img style:UIBarButtonItemStylePlain target:self action:@selector(rightButtonItemClicked:)];
self.navigationItem.rightBarButtonItems = @[rightNegativeSpacer,rightBtnItem1,rightBtnItem2];
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;iOS开发中的一些列小技巧，总有一个你用得到&lt;br&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yongqianvip.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>React-Native设置自定义字体文件</title>
    <link href="http://yongqianvip.github.io/2016/08/26/RN_iconfont/"/>
    <id>http://yongqianvip.github.io/2016/08/26/RN_iconfont/</id>
    <published>2016-08-26T07:07:25.000Z</published>
    <updated>2016-09-13T07:57:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天主要说说如何通过字体文件加载应用中的一些图标  </p>
<p>首先推荐一个网站<a href="http://www.iconfont.cn" target="_blank" rel="external">iconfont-阿里巴巴矢量图标库</a>，这里有海量的图标，可以下载你想要的各种矢量图标，你也可以在注册并登陆账号后，把自己想要的图标打包、下载为文件<br><a id="more"></a></p>
<ul>
<li>关于<a href="https://facebook.github.io/react-native/docs/text.html" target="_blank" rel="external"><code>&lt;Text&gt;</code></a>组件<br>  通过<code>fontFamily</code>可以指定<code>&lt;Text&gt;</code>显示的字体文件，下文将详细说明</li>
<li>代码</li>
</ul>
<pre><code>&lt;View style={{backgroundColor:'white',width:width-44,height: 36,marginTop: 2,flexDirection:'row',alignItems: 'center',justifyContent: 'space-around',}} &gt;
    &lt;Text style={{ color: 'red', fontFamily:'iconfont',fontSize: 30 }}&gt;&amp;#xe603;&lt;/Text&gt;
    &lt;Text style={{ color: 'red', fontFamily:'iconfont',fontSize: 30 }}&gt;&amp;#xe602;&lt;/Text&gt;
    &lt;Text style={{ color: 'red', fontFamily:'iconfont',fontSize: 30 }}&gt;&amp;#xe604;&lt;/Text&gt;
    &lt;Text style={{ color: 'red', fontFamily:'iconfont',fontSize: 30 }}&gt;&amp;#xe605;&lt;/Text&gt;
    &lt;Text style={{ color: 'red', fontFamily:'iconfont',fontSize: 30 }}&gt;&amp;#xe600;&lt;/Text&gt;
&lt;/View&gt;
</code></pre><ul>
<li><p>效果图：</p>
<p>  <img src="http://7xp7q7.com1.z0.glb.clouddn.com/image/RN/iconfont_top.png" alt="用字体文件加载图标"></p>
</li>
</ul>
<h3 id="下面说重点"><a href="#下面说重点" class="headerlink" title="下面说重点"></a>下面说重点</h3><ul>
<li><p>从<a href="http://www.iconfont.cn" target="_blank" rel="external">阿里巴巴矢量图标库</a>中选择适合的图标，并打包下载</p>
<p>  <img src="http://7xp7q7.com1.z0.glb.clouddn.com/image/RN/downloadicon.png" alt=""></p>
</li>
<li><p>下载后得到如下文件，<code>iconfont.tff</code>即为所需文件<br>  <img src="http://7xp7q7.com1.z0.glb.clouddn.com/image/RN/iconfontfiles.png" alt="">  </p>
</li>
<li><p>在根工程目录下创建<code>assets/fonts/</code>文件夹，导入<code>iconfont.ttf</code>文件<br>  <img src="http://7xp7q7.com1.z0.glb.clouddn.com/image/RN/filetree.png" alt=""></p>
</li>
</ul>
<h5 id="1-iOS"><a href="#1-iOS" class="headerlink" title="1. iOS"></a>1. iOS</h5><p>把<code>fonts</code>文件夹拖到iOS工程目录下</p>
<p>   <img src="http://7xp7q7.com1.z0.glb.clouddn.com/image/RN/iconfontaddfile.png" alt="">  </p>
<p>   <img src="http://7xp7q7.com1.z0.glb.clouddn.com/image/RN/iconfontfiletree.png" alt="">  </p>
<p>另外还需要在info.plist文件key为 <code>Fonts provided by application</code>的Array中添加item <code>fonts/iconfont.ttf</code>，到此为止，已经可以在RN项目中使用对应<code>fontFamily</code>:<code>iconfont</code>中的字体图标了</p>
<h4 id="2-Android"><a href="#2-Android" class="headerlink" title="2. Android"></a>2. Android</h4><p>之所以在工程目录下创建<code>assets/fonts</code>这样的路径，就是为了iOS和Android统一，因为Android必须要把字体文件放在<code>[project root]/android/app/src/main/assets/fonts/</code>文件夹下才能生效，好吧，我们把工程目录下的<code>assets</code>拷贝一份到<code>Android/app/src/main</code>目录下<br>    <img src="http://7xp7q7.com1.z0.glb.clouddn.com/image/RN/iconfontandroidfile.png" alt=""></p>
<h4 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h4><pre><code>&lt;View style={{backgroundColor:'white',width:width-44,height: 36,marginTop: 2,flexDirection:'row',alignItems: 'center',justifyContent: 'space-around',}} &gt;
    &lt;Text style={{ color: 'red', fontFamily:'iconfont',fontSize: 30 }}&gt;&amp;#xe603;&lt;/Text&gt;
    &lt;Text style={{ color: 'red', fontFamily:'iconfont',fontSize: 30 }}&gt;&amp;#xe602;&lt;/Text&gt;
    &lt;Text style={{ color: 'red', fontFamily:'iconfont',fontSize: 30 }}&gt;&amp;#xe604;&lt;/Text&gt;
    &lt;Text style={{ color: 'red', fontFamily:'iconfont',fontSize: 30 }}&gt;&amp;#xe605;&lt;/Text&gt;
    &lt;Text style={{ color: 'red', fontFamily:'iconfont',fontSize: 30 }}&gt;&amp;#xe600;&lt;/Text&gt;
&lt;/View&gt;
</code></pre><p>效果就是文章开篇的效果图了</p>
<h4 id="4-弊端"><a href="#4-弊端" class="headerlink" title="4. 弊端"></a>4. 弊端</h4><p>图标对应的unicode码(如：<code>&amp;#xe602;``&amp;#xe603;``&amp;#xe604;``&amp;#xe605;</code>)跟显示的图标没有直接的对应关系</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天主要说说如何通过字体文件加载应用中的一些图标  &lt;/p&gt;
&lt;p&gt;首先推荐一个网站&lt;a href=&quot;http://www.iconfont.cn&quot;&gt;iconfont-阿里巴巴矢量图标库&lt;/a&gt;，这里有海量的图标，可以下载你想要的各种矢量图标，你也可以在注册并登陆账号后，把自己想要的图标打包、下载为文件&lt;br&gt;
    
    </summary>
    
    
      <category term="React-Native" scheme="http://yongqianvip.github.io/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>解决Xcode编译报错：Can&#39;t find &#39;node&#39; binary to build React Native bundle</title>
    <link href="http://yongqianvip.github.io/2016/08/24/RN_Xcode_Can&#39;tFindNode/"/>
    <id>http://yongqianvip.github.io/2016/08/24/RN_Xcode_Can&#39;tFindNode/</id>
    <published>2016-08-24T07:07:25.000Z</published>
    <updated>2016-09-13T08:00:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>刚开始接触React-Native的时候我曾遇到一个错，最近发现有人也在问这个问题，所以我在这里记一下，供同学参考<br><a id="more"></a></p>
<ul>
<li>开发React-Native项目需要搭建一系列开发环境，环境搭好之后，我再Xcode上编译的过程中遇到了一个错误：<br><img src="http://7xp7q7.com1.z0.glb.clouddn.com/image/RN/error/error.png" alt="error"></li>
</ul>
<pre><code>error: Can&apos;t find &apos;node&apos; binary to build React Native bundle
If you have non-standard nodejs installation, select your project in Xcode,
find &apos;Build Phases&apos; - &apos;Bundle React Native code and images&apos;
and change NODE_BINARY to absolute path to your node executable
(you can find it by invoking &apos;which node&apos; in the terminal)
</code></pre><ul>
<li>一开始面对这个错误真的是束手无策，后来仔细阅读错误日志之后才发现自己是多么可笑，只能怪自己对英文不敏感，上边的错误日志翻译过来就是：</li>
</ul>
<pre><code>如果你使用了非标准的 nodejs 安装流程，
在Xcode中选择Project -&gt; Build Phases -&gt; Bundle React Native code and images，
把NODE_BINARY改为node可执行文件的绝对路径
你可以在终端命令行中执行 `$ which node` 来查看你当前node的绝对路径
</code></pre><ul>
<li>好了，这下明白多了，我的nodejs是从官网下载的tar包解压手动安装的，所以<code>export NODE_BINARY=node</code>是不行的，需要换成node的绝对路径</li>
</ul>
<pre><code>//终端执行
$ which node    

//输出node的绝对路径
</code></pre><p>按照下图替换掉<code>node</code></p>
<p><img src="http://7xp7q7.com1.z0.glb.clouddn.com/image/RN/error/buildPhases.png" alt="Build Phases"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刚开始接触React-Native的时候我曾遇到一个错，最近发现有人也在问这个问题，所以我在这里记一下，供同学参考&lt;br&gt;
    
    </summary>
    
    
      <category term="React-Native" scheme="http://yongqianvip.github.io/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>React-Native项目中使用TabBar</title>
    <link href="http://yongqianvip.github.io/2016/08/16/RN_TabBar/"/>
    <id>http://yongqianvip.github.io/2016/08/16/RN_TabBar/</id>
    <published>2016-08-16T07:07:25.000Z</published>
    <updated>2016-09-13T08:15:31.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://yongqian.sinaapp.com/blog/Dev_exp/RNNavigationBar.html" target="_blank" rel="external">之前的文章</a>讲述了在RN项目中如何使用NavigationBar，如何调用原生模块，以及集成下拉刷新和上拉加载更多的功能，今天介绍一个第三方插件<a href="https://github.com/exponentjs/react-native-tab-navigator" target="_blank" rel="external">react-native-tab-navigator</a>，讲述我是如何使用它在RN项目中使用TabBar<br><a id="more"></a><br><a href="https://github.com/yongqianvip/RN-ListViewLoadMore" target="_blank" rel="external">项目源码在这里</a>  </p>
<ol>
<li><p>安装插件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install react-native-tab-navigator --save</div></pre></td></tr></table></figure>
</li>
<li><p>使用<br>就我的demo来说：<br>Demo中包含了Navigator管理的一系列视图，我尝试过使用一个<code>Tab</code>管理多个由<code>Navigator</code>管理的一系列视图<br>(这跟我之前的iOS开发经验有关，在iOS中<code>Application</code>的根视图是<code>TabBarController</code>，这个<code>TabBarController</code>管理多个由<code>NavigationController</code>管理的一系列<code>ViewController</code>）   </p>
<p> <strong>但是这有一个问题：</strong>  </p>
<p> 场景切换的时候可能有隐藏TabBar的需求，按照刚才说的方法，我需要set一个值来控制tabbar的<code>height</code>和<code>overflow</code>，又由于<code>component</code>的生命周期函数中没有类似于iOS中<code>-（void)viewWillAppear;</code>的方法，所以没有很好的方法把隐藏的tabbar再显示出来（如果你有解决这个问题的方法，请告诉我）。  </p>
<p> <strong>那么换一种思路：</strong></p>
<p> 把管理一系列视图的<code>Tab</code>交由一个<code>Navigator</code>管理，虽然这样违背了iOS开发的普通思路，但是就目前在RN项目中，没有发现太大的问题（有一个问题是只有一级页面显示TabBar，所有二级页面全部不显示，不过就国内大多数应用设计风格来看，这个问题也不算是问题）。  </p>
</li>
<li><p><code>react-native-vector-icons</code><br>这是一个图标库，有兴趣话可以<a href="https://github.com/oblador/react-native-vector-icons" target="_blank" rel="external">去这里</a>深入了解，简单使用请执行下边两条命令即可</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm install react-native-vector-icons --save</div><div class="line">$ rnpm link</div></pre></td></tr></table></figure>
<p> 使用：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">import Icon from &apos;react-native-vector-icons/Ionicons&apos;;</div><div class="line">&lt;Icon name=&#123; &apos;ios-home&apos; &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>关键部分代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">//root.js</div><div class="line">import React from &apos;react&apos;</div><div class="line">import &#123;</div><div class="line">	Navigator</div><div class="line">&#125; from &apos;react-native&apos;;</div><div class="line">import &#123; Provider &#125; from &apos;react-redux&apos;</div><div class="line">import configureStore from &apos;./store/store.js&apos;</div><div class="line">import App from &apos;./containers/app.js&apos;</div><div class="line">const store = configureStore();</div><div class="line"></div><div class="line">class Root extends React.Component &#123;</div><div class="line">	render() &#123;</div><div class="line">		return (</div><div class="line">			&lt;Provider store=&#123; store &#125;&gt;</div><div class="line">				//在原来&lt;App /&gt;的基础上添加Navigator</div><div class="line">				&lt;Navigator </div><div class="line">				    initialRoute=&#123;&#123; component: App &#125;&#125;</div><div class="line">				    configureScene=&#123;(route) =&gt; &#123;</div><div class="line">				        return Navigator.SceneConfigs.FloatFromRight;</div><div class="line">				    &#125;&#125;</div><div class="line">				    renderScene=&#123;(route, navigator) =&gt; &#123;</div><div class="line">				    	let Component = route.component;</div><div class="line">				        return &lt;Component &#123;...route.params&#125; navigator=&#123;navigator&#125; /&gt;</div><div class="line">				    &#125;&#125; /&gt;</div><div class="line">			&lt;/Provider&gt;</div><div class="line">		);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">export default Root;</div></pre></td></tr></table></figure>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">//app.js  ( render()&#123;&#125; ) </div><div class="line"></div><div class="line">render() &#123;</div><div class="line">       const &#123; reducer &#125; = this.props;</div><div class="line">       console.log(&quot;============&quot;,reducer.tabbarHeight);</div><div class="line">       return (</div><div class="line">           &lt;TabNavigator tabBarStyle=&#123;&#123; backgroundColor:&apos;white&apos; &#125;&#125; style=&#123;&#123;backgroundColor: &apos;white&apos;&#125;&#125;&gt;</div><div class="line">              	&lt;TabNavigator.Item</div><div class="line">                   title=&quot;主页&quot;</div><div class="line">                   selected=&#123;this.state.selectedTab === &apos;home&apos;&#125;</div><div class="line">                   renderIcon=&#123;() =&gt; &lt;Icon name=&#123; &apos;ios-home&apos; &#125; size=&#123;30&#125; color=&#123;&apos;gray&apos;&#125;/&gt;&#125;</div><div class="line">                   renderSelectedIcon=&#123;() =&gt; &lt;Icon name=&#123; &apos;ios-home&apos; &#125; size=&#123;30&#125; color=&#123;&apos;#4E78E7&apos;&#125;/&gt;&#125;</div><div class="line">                   onPress=&#123;() =&gt; this.setState(&#123; selectedTab: &apos;home&apos; &#125;)&#125;&gt;</div><div class="line">                   &lt;ProductListContainer &#123;...this.props&#125; /&gt;</div><div class="line">               &lt;/TabNavigator.Item&gt;</div><div class="line">               &lt;TabNavigator.Item</div><div class="line">                   title=&quot;其他&quot;</div><div class="line">                   selected=&#123;this.state.selectedTab === &apos;other&apos;&#125;</div><div class="line">                   renderIcon=&#123;() =&gt; &lt;Icon name=&#123; &apos;ios-more&apos; &#125; size=&#123;30&#125; color=&#123;&apos;gray&apos;&#125;/&gt;&#125;</div><div class="line">                   renderSelectedIcon=&#123;() =&gt; &lt;Icon name=&#123; &apos;ios-more&apos; &#125; size=&#123;30&#125; color=&#123;&apos;#4E78E7&apos;&#125;/&gt;&#125;</div><div class="line">                   onPress=&#123;() =&gt; this.setState(&#123; selectedTab: &apos;other&apos; &#125;)&#125;&gt;</div><div class="line">                   &lt;OtherContainer &#123;...this.props&#125;/&gt;</div><div class="line">               &lt;/TabNavigator.Item&gt;</div><div class="line">           &lt;/TabNavigator&gt;</div><div class="line">       );</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>效果图  </p>
<p> <img src="http://7xp7q7.com1.z0.glb.clouddn.com/image/RN/gif/tabbar.gif" alt="tabba"></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://yongqian.sinaapp.com/blog/Dev_exp/RNNavigationBar.html&quot;&gt;之前的文章&lt;/a&gt;讲述了在RN项目中如何使用NavigationBar，如何调用原生模块，以及集成下拉刷新和上拉加载更多的功能，今天介绍一个第三方插件&lt;a href=&quot;https://github.com/exponentjs/react-native-tab-navigator&quot;&gt;react-native-tab-navigator&lt;/a&gt;，讲述我是如何使用它在RN项目中使用TabBar&lt;br&gt;
    
    </summary>
    
    
      <category term="React-Native" scheme="http://yongqianvip.github.io/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>React-Native中通过JS调用原生模块</title>
    <link href="http://yongqianvip.github.io/2016/08/03/RNDemoToast/"/>
    <id>http://yongqianvip.github.io/2016/08/03/RNDemoToast/</id>
    <published>2016-08-03T07:07:25.000Z</published>
    <updated>2016-09-13T08:21:07.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>官方教程中有讲述在<a href="http://reactnative.cn/docs/0.30/native-modules-ios.html#content" target="_blank" rel="external">RN中如何集成原生模块（iOS日历组件）</a><br>这里我也写了一个简单的示例，目标是 <strong>实现消息提示框（Toast）</strong><br><a id="more"></a><br><a href="https://github.com/yongqianvip/RN-ListViewLoadMore/" target="_blank" rel="external">源码还在这里</a></p>
</blockquote>
<h3 id="一、iOS"><a href="#一、iOS" class="headerlink" title="一、iOS"></a>一、iOS</h3><p>在React Native中，一个“原生模块”就是一个实现了“RCTBridgeModule”协议的Objective-C类，其中RCT是ReaCT的缩写。 </p>
<h5 id="1、原生部分："><a href="#1、原生部分：" class="headerlink" title="1、原生部分："></a>1、原生部分：</h5><ul>
<li><p>NativeToast.h</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#import &quot;RCTBridgeModule.h&quot;</div><div class="line">#import &quot;RCTLog.h&quot;</div><div class="line">#import &lt;UIKit/UIKit.h&gt;</div><div class="line"></div><div class="line">@interface NativeToast : NSObject &lt;RCTBridgeModule&gt;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
</li>
<li><p>NativeToast.m</p>
<blockquote>
<p>必须明确的声明要给Javascript导出的方法，否则React Native不会导出任何方法。声明通过RCT_EXPORT_METHOD()宏来实现：</p>
</blockquote>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">#import &quot;NativeToast.h&quot;</div><div class="line">#import &quot;Global.h&quot;</div><div class="line">@implementation NativeToast </div><div class="line">RCT_EXPORT_MODULE();</div><div class="line">#pragma mark iOS Native Toast</div><div class="line">RCT_EXPORT_METHOD(showMessage:(NSString *)message showTime:(NSInteger)showTime positions:(NSString *)position)&#123;</div><div class="line">  NSLog(@&quot;__canshu position = %@ showTime = %ld&quot;,position,showTime);</div><div class="line">  UIWindow *window = [UIApplication sharedApplication].keyWindow;</div><div class="line">  UIView *showView = [[UIView alloc] init];</div><div class="line">  [showView setUserInteractionEnabled:NO];</div><div class="line">  dispatch_async(dispatch_get_main_queue(), ^&#123;</div><div class="line">    [showView setBackgroundColor:[UIColor colorWithRed:0 green:0 blue:0 alpha:0.8f]];</div><div class="line">    showView.layer.cornerRadius = 5.0f;</div><div class="line">    showView.layer.masksToBounds = YES;</div><div class="line">    [window addSubview:showView];</div><div class="line">    </div><div class="line">    UILabel *label = [[UILabel alloc] init];</div><div class="line">    label.text = message;</div><div class="line">    label.textColor = [UIColor whiteColor];</div><div class="line">    label.backgroundColor = [UIColor clearColor];</div><div class="line">    label.textAlignment = 1;</div><div class="line">	</div><div class="line">    label.numberOfLines = 0;</div><div class="line">    label.font = [UIFont boldSystemFontOfSize:TOAST_FONT_SIZE];</div><div class="line">    CGRect realRect = [message boundingRectWithSize:CGSizeMake(TOAST_MAX_WIDTH, TOAST_MAX_HEIGHT) options:NSStringDrawingUsesLineFragmentOrigin attributes:@&#123;NSFontAttributeName:label.font&#125;  context:nil];</div><div class="line">    CGSize labelSize = realRect.size;</div><div class="line">    labelSize.height = labelSize.height &lt; TOAST_MIN_HEIGHT ? TOAST_MIN_HEIGHT : labelSize.height;</div><div class="line">    labelSize.width = labelSize.width &lt; TOAST_MIN_WIDTH ? TOAST_MIN_WIDTH : labelSize.width;</div><div class="line">    label.frame = CGRectMake(10, 5, labelSize.width, labelSize.height);</div><div class="line">    [showView addSubview:label];</div><div class="line">    </div><div class="line">    CGRect rect = [[UIScreen mainScreen] bounds];</div><div class="line">    CGSize size = rect.size;</div><div class="line">    CGFloat width = size.width;</div><div class="line">    CGFloat height = size.height;</div><div class="line">    CGFloat positionPoint = 0.5;</div><div class="line">    if (position) &#123;</div><div class="line">      if ([position isEqualToString:@&quot;top&quot;]) &#123;</div><div class="line">        positionPoint = 0.2;</div><div class="line">      &#125;else if ([position isEqualToString:@&quot;center&quot;])&#123;</div><div class="line">        positionPoint = 0.5;</div><div class="line">      &#125;else if ([position isEqualToString:@&quot;bottom&quot;])&#123;</div><div class="line">        positionPoint = 0.8;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    NSInteger realShowTime = showTime;</div><div class="line">    if (realShowTime &lt; 1) &#123;</div><div class="line">      realShowTime = 1;</div><div class="line">    &#125;else if (realShowTime &gt; 5)&#123;</div><div class="line">      realShowTime = 5;</div><div class="line">    &#125;</div><div class="line">    showView.frame = CGRectMake((width - labelSize.width - 20) / 2, height * positionPoint, labelSize.width + 20, labelSize.height + 10);</div><div class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(realShowTime * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</div><div class="line">      [UIView animateWithDuration:1 animations:^&#123;</div><div class="line">        showView.alpha = 0;</div><div class="line">      &#125; completion:^(BOOL finished)&#123;</div><div class="line">        [showView removeFromSuperview];</div><div class="line">      &#125;];</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<ul>
<li>通过上边的代码我们就导出了一个“showMessage”的方法，接受三个参数，这个方法可以在JS内部调用</li>
</ul>
<h5 id="2、JS中调用"><a href="#2、JS中调用" class="headerlink" title="2、JS中调用"></a>2、JS中调用</h5><p><code>ListViewLoadMore/app/components/ProductImageShow.js</code></p>
<pre><code>import {
    //...
    NativeModules,
} from &apos;react-native&apos;
class ProductImageShow extends Component {
    //...
    _toast() {
        // showMessage(&apos;提示信息内容&apos;,&apos;显示时长1~5秒&apos;,&apos;位置[&apos;top&apos;,&apos;center&apos;,&apos;bottom&apos;]&apos;)
        NativeModules.NativeToast.showMessage(
            `提示信息\n可以控制显示的时间\nshowTime:[1~5]\n可以控制提示信息显示的位置\nposition:[&apos;top&apos;,&apos;center&apos;,&apos;bottom&apos;]`,
            5,
            &apos;center&apos;
        )
    }

    render() {
        return (
            &lt;View style={ styles.mainView }&gt;
                //...
                &lt;TouchableOpacity onPress={ this._toast.bind(this) }&gt;
                    &lt;View style={ styles.bottomTitleView }&gt;
                        &lt;Text style={ styles.bottomTitle }&gt;点击图片可以去图文详情页&lt;/Text&gt;
                    &lt;/View&gt;
                &lt;/TouchableOpacity&gt;
            &lt;/View&gt;
        )
    }
}
</code></pre><h5 id="3、效果图"><a href="#3、效果图" class="headerlink" title="3、效果图"></a>3、效果图</h5><p><img src="http://7xp7q7.com1.z0.glb.clouddn.com/image/RN/toast.png" alt="toast"></p>
<h3 id="二、Android"><a href="#二、Android" class="headerlink" title="二、Android"></a>二、Android</h3><p>####….<br>待补充。。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;官方教程中有讲述在&lt;a href=&quot;http://reactnative.cn/docs/0.30/native-modules-ios.html#content&quot;&gt;RN中如何集成原生模块（iOS日历组件）&lt;/a&gt;&lt;br&gt;这里我也写了一个简单的示例，目标是 &lt;strong&gt;实现消息提示框（Toast）&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="React-Native" scheme="http://yongqianvip.github.io/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>Reat-Native中使用Navigatior和自定义NavigationBar</title>
    <link href="http://yongqianvip.github.io/2016/08/01/RNNavigationBar/"/>
    <id>http://yongqianvip.github.io/2016/08/01/RNNavigationBar/</id>
    <published>2016-08-01T07:07:25.000Z</published>
    <updated>2016-09-13T08:21:45.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://yongqian.sinaapp.com/blog/Dev_exp/RN-ListViewLoadMore.html" target="_blank" rel="external">上一次我在这里</a>记录了我是如何处理<strong>上拉加载更多和下拉刷新</strong>的，这次是应用中的导航功能以及自定义导航栏NavigationBar<br><a id="more"></a><br><a href="https://github.com/yongqianvip/RN-ListViewLoadMore/" target="_blank" rel="external">源码还在这里</a>  </p>
<h4 id="Navigator（RN提供的组件）"><a href="#Navigator（RN提供的组件）" class="headerlink" title="Navigator（RN提供的组件）"></a>Navigator（RN提供的组件）</h4><p>只要App不止有一个场景，那么这个App肯定少不了一个导航控制器 (iOS中的<code>NavigationController</code>) Navigator是RN提供的<a href="http://reactnative.cn/docs/0.30/navigator.html#content" target="_blank" rel="external">官方组件</a>，兼顾了iOS和Android，<a href="http://bbs.reactnative.cn/topic/20/%E6%96%B0%E6%89%8B%E7%90%86%E8%A7%A3navigator%E7%9A%84%E6%95%99%E7%A8%8B/2" target="_blank" rel="external">这里有一个关于Navigator很详细的教程</a>  </p>
<p><code>这次要用Navigator实现 【首页（商品列表） --&gt; 图片详情页 --&gt; 图文详情页】这一系列的场景切换，另外在“图文详情”页实现了通过滚动视图的偏移量控制NavigationBar渐隐、渐现</code>  </p>
<p>截取关键代码</p>
<ul>
<li>root.js</li>
</ul>
<pre><code>&apos;use strict&apos;;
import React from &apos;react&apos;
import { Provider } from &apos;react-redux&apos;
import configureStore from &apos;./store/store.js&apos;
import App from &apos;./containers/app.js&apos;
const store = configureStore();
export default class Root extends React.Component {
    constructor(props) {
      super(props);
    }
    render() {
        return (
            &lt;Provider store={ store }&gt;
                &lt;App /&gt;
            &lt;/Provider&gt;
        );
    }
}
</code></pre><ul>
<li>app.js</li>
</ul>
<pre><code>把`ProductListContainer`设置为根视图，

    import React from &apos;react&apos;;
    import {
        View,
        Navigator
    } from &apos;react-native&apos;;
    import ProductListContainer from &apos;./ProductListContainer&apos;
    export default class App extends React.Component {
        render() {
            let defaultComponent = ProductListContainer;
            return (
            &lt;Navigator 
                initialRoute={{ component: defaultComponent }}
                configureScene={(route) =&gt; {
                    return Navigator.SceneConfigs.FloatFromRight;
                }}
                renderScene={(route, navigator) =&gt; {
                    let Component = route.component;
                    return &lt;Component {...route.params} navigator={navigator} /&gt;
                    //  上面的route.params 是为了方便后续界面间传递参数用的
                }} /&gt;
            );
        }
    } 
</code></pre><ul>
<li><p>自定义<code>NavitagionBar</code> NavBarCommon.js(名字以后肯能会改)</p>
<p>  <code>ListViewLoadMore/app/common/NavBarCommon.js</code></p>
</li>
</ul>
<pre><code>render() {
    // leftTitle和leftImage 优先判断leftTitle (即 文本按钮和图片按钮优先显示文本按钮)
    const { title, leftTitle, leftImage, leftAction, rightTitle, rightImage, rightAction } = this.props;
    return (
        &lt;View style={[styles.barView, this.props.style]}&gt;
            &lt;View style={ styles.showView }&gt;
                {
                    (()=&gt;{
                        if (leftTitle) {
                            return &lt;TouchableOpacity style={styles.leftNav} onPress={ ()=&gt;{leftAction()} }&gt;
                                    &lt;View style={{alignItems: 'center'}}&gt;
                                        &lt;Text style={styles.barButton}&gt;{leftTitle}&lt;/Text&gt;
                                    &lt;/View&gt;
                                &lt;/TouchableOpacity&gt;
                        } else if (leftImage) {
                            return &lt;TouchableOpacity style={styles.leftNav} onPress={ ()=&gt;{leftAction()} }&gt;
                                    &lt;View style={{alignItems: 'center'}}&gt;
                                        &lt;Image source={ leftImage }/&gt;
                                    &lt;/View&gt;
                                &lt;/TouchableOpacity&gt;
                        };
                    })()
                }
                {
                    (()=&gt;{
                        if (title) {
                            return &lt;Text style={styles.title}&gt;{title || &apos;&apos;}&lt;/Text&gt;                
                        }
                    })()
                }
                {
                    (()=&gt;{
                        if (rightTitle) {
                            return &lt;TouchableOpacity style={styles.rightNav} onPress={ ()=&gt;{rightAction()} }&gt;
                                    &lt;View style={{alignItems: 'center'}}&gt;
                                        &lt;Text style={styles.barButton}&gt;{rightTitle}&lt;/Text&gt;
                                    &lt;/View&gt;
                                &lt;/TouchableOpacity&gt;
                        } else if (rightImage) {
                            return &lt;TouchableOpacity style={styles.rightNav} onPress={ ()=&gt;{rightAction()} }&gt;
                                    &lt;View style={{alignItems: 'center'}}&gt;
                                        &lt;Image source={ rightImage }/&gt;
                                    &lt;/View&gt;
                                &lt;/TouchableOpacity&gt;
                        }
                    })()
                }

            &lt;/View&gt;
        &lt;/View&gt;
    )
}
</code></pre><h3 id="调用的方法和示例："><a href="#调用的方法和示例：" class="headerlink" title="调用的方法和示例："></a><strong>调用的方法和示例：</strong></h3><p>首先引入组件</p>
<pre><code>import NavigationBar from &apos;../common/NavBarCommon.js&apos;
</code></pre><p>1 最简单的样式 只有标题</p>
<pre><code>&lt;NavigationBar title={&apos;首页&apos;}/&gt;
</code></pre><p>2 标题、左边按钮</p>
<pre><code>&lt;NavigationBar style={{opacity: this.state.navOpacity}} title={&apos;图文详情&apos;} leftImage={ backIcon } leftAction={ this._backToFront.bind(this) }/&gt;
</code></pre><p>3 标题、左边按钮、右边按钮</p>
<pre><code>&lt;NavigationBar title={&apos;图片详情&apos;} leftImage={ backIcon } leftAction={ this._backToFront.bind(this) } rightTitle={&apos;去看图文详情&apos;} rightImage={ backIcon } rightAction={ this._toAnotherDetail.bind(this) } /&gt;
</code></pre><p><code>NavigationBar</code>上的所有部分都是可选项，可以什么都不设置，那就是一个空白的导航栏<br>那么对应的只要设置相应的文本或图片（文本优先）以及相应的响应事件，就可以实现想要的效果</p>
<h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="http://7xp7q7.com1.z0.glb.clouddn.com/RNDemo5.gif" alt="导航栏使用"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://yongqian.sinaapp.com/blog/Dev_exp/RN-ListViewLoadMore.html&quot;&gt;上一次我在这里&lt;/a&gt;记录了我是如何处理&lt;strong&gt;上拉加载更多和下拉刷新&lt;/strong&gt;的，这次是应用中的导航功能以及自定义导航栏NavigationBar&lt;br&gt;
    
    </summary>
    
    
      <category term="React-Native" scheme="http://yongqianvip.github.io/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>React-Native中处理ListView的上拉加载更多</title>
    <link href="http://yongqianvip.github.io/2016/07/31/RN-ListViewLoadMore/"/>
    <id>http://yongqianvip.github.io/2016/07/31/RN-ListViewLoadMore/</id>
    <published>2016-07-31T07:07:25.000Z</published>
    <updated>2016-09-13T08:23:53.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>ReactNative</code>(<code>RN</code>)中的<code>ListView</code>是一个非常常用的组件，<code>RN</code>中已经有了现成的<code>RefreshControl</code>，官方文档中有具体用法，这里主要记录一下我是如何做<strong>上拉加载更多</strong>的<br>示例中的数据来源于阿里巴巴网站</p>
<pre><code>https://m.alibaba.com/products/tool_boxes/2.html?XPJAX=1
https://m.alibaba.com/products/tool_boxes/3.html?XPJAX=1
https://m.alibaba.com/products/tool_boxes/4.html?XPJAX=1
</code></pre><p>因为没有涉及原生部分代码，且<code>RN</code>组件也是通用的，所以理论上是兼容<code>iOS</code>和<code>Android</code>的<br><a id="more"></a><br><a href="https://github.com/yongqianvip/RN-ListViewLoadMore" target="_blank" rel="external">工程源码在这里</a>    </p>
<ul>
<li>目录结构如图：<br>  <img src="https://github.com/yongqianvip/RN-ListViewLoadMore/blob/master/localSource/images/tree.png?raw=true" alt="tree"><br>  熟悉<a href="http://cn.redux.js.org/docs/basics/Reducers.html" target="_blank" rel="external"><code>Redux</code></a>  的对这个结构肯定不陌生，为了尽可能的简单，工程中只保留了单个<code>Action</code>(<code>product.js</code>)和单个<code>Reducer</code>(<code>rootReducer.js</code>)</li>
</ul>
<ul>
<li><p>一定要把控好各种状态  </p>
<p>  不管是下拉刷新，还是加载更多，都要有一个对应的状态来控制，以便于<strong>加锁</strong>，防止重复操作<br>  如果<code>isLoadingMore</code>为<code>true</code>，不能再响应<code>LoadMoreData</code>方法<br>  <code>LoadMoreData</code>结束（成功或失败）后将<code>isLoadingMore</code>置为<code>false</code></p>
</li>
<li><p>关键方法 <code>onEndReached</code><br>ListView在滚动到最后一个<code>Cell</code>的时候，会触发<code>onEndReached</code>方法，就是从这个方法入手，在<code>ProductList.js</code>中，</p>
</li>
</ul>
<pre><code>let _pageNo = 2;
const _pageSize = 30;
export defaultclass ProductList extends Component {

    ...

    _toEnd() {
        const { reducer } = this.props;
        //ListView滚动到底部，根据是否正在加载更多 是否正在刷新 是否已加载全部来判断是否执行加载更多
        if (reducer.isLoadingMore || reducer.products.length &gt;= reducer.totalProductCount || reducer.isRefreshing) {
            return;
        };
        InteractionManager.runAfterInteractions(() =&gt; {
            console.log(&quot;触发加载更多 toEnd() --&gt; &quot;);
            this._loadMoreData();
        });
    }
    _loadMoreData() {
        const { reducer, dispatch } = this.props;
        dispatch(changeProductListLoadingMore(true));
        _pageNo = Number.parseInt(reducer.products.length / _pageSize) + 1;
        dispatch(getProductList(_pageNo));
    }
    _renderFooter() {
        const { reducer } = this.props;
        //通过当前product数量和刷新状态（是否正在下拉刷新）来判断footer的显示
        if (reducer.products.length &lt; 1 || reducer.isRefreshing) {
            return null
        };
        if (reducer.products.length &lt; reducer.totalProductCount) {
            //还有更多，默认显示‘正在加载更多...’
            return &lt;LoadMoreFooter /&gt;
        }else{
            // 加载全部
            return &lt;LoadMoreFooter isLoadAll={true}/&gt;
        }
    }

    render() {
        const { reducer } = this.props;
        const ds = new ListView.DataSource({rowHasChanged: (r1, r2) =&gt; r1 !== r2});
        return (
            &lt;ListView style={ styles.listViewContent } 
                dataSource={ ds.cloneWithRows(reducer.products) } 
                renderRow={ this._renderRow.bind(this) }
                onEndReached={ this._toEnd.bind(this) }
                onEndReachedThreshold={10}
                renderFooter={ this._renderFooter.bind(this) }
                enableEmptySections={true} 
                refreshControl={
                    &lt;RefreshControl
                        refreshing={ reducer.isRefreshing }
                        onRefresh={ this._onRefresh.bind(this) }
                        tintColor=&quot;gray&quot;
                        colors={[&apos;#ff0000&apos;, &apos;#00ff00&apos;, &apos;#0000ff&apos;]}
                        progressBackgroundColor=&quot;gray&quot;/&gt;
                    }/&gt;

        )
    }

    ...
}
</code></pre><ul>
<li>加载更多组件<code>LoadMoreFooter</code></li>
</ul>
<pre><code>import React, { Component } from &apos;react&apos;;
import {
    View,
    Text,
    StyleSheet,
} from &apos;react-native&apos;;
class LoadMoreFooter extends Component {
    constructor(props) {
        super(props);
    }
    render() {
        return (
            &lt;View style={styles.footer}&gt;
                &lt;Text style={styles.footerTitle}&gt;{this.props.isLoadAll ? &apos;已加载全部&apos; : &apos;正在加载更多……&apos;}&lt;/Text&gt;
            &lt;/View&gt;
        )
    }
}
const styles = StyleSheet.create({
    footer: {
        flexDirection: &apos;row&apos;,
        justifyContent: &apos;center&apos;,
        alignItems: &apos;center&apos;,
        height: 40,
    },
    footerTitle: {
        marginLeft: 10,
        fontSize: 15,
        color: &apos;gray&apos;
    }
})

export default LoadMoreFooter    
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;ReactNative&lt;/code&gt;(&lt;code&gt;RN&lt;/code&gt;)中的&lt;code&gt;ListView&lt;/code&gt;是一个非常常用的组件，&lt;code&gt;RN&lt;/code&gt;中已经有了现成的&lt;code&gt;RefreshControl&lt;/code&gt;，官方文档中有具体用法，这里主要记录一下我是如何做&lt;strong&gt;上拉加载更多&lt;/strong&gt;的&lt;br&gt;示例中的数据来源于阿里巴巴网站&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://m.alibaba.com/products/tool_boxes/2.html?XPJAX=1
https://m.alibaba.com/products/tool_boxes/3.html?XPJAX=1
https://m.alibaba.com/products/tool_boxes/4.html?XPJAX=1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;因为没有涉及原生部分代码，且&lt;code&gt;RN&lt;/code&gt;组件也是通用的，所以理论上是兼容&lt;code&gt;iOS&lt;/code&gt;和&lt;code&gt;Android&lt;/code&gt;的&lt;br&gt;
    
    </summary>
    
    
      <category term="React-Native" scheme="http://yongqianvip.github.io/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>你的App几秒钟完成启动？</title>
    <link href="http://yongqianvip.github.io/2016/05/01/LaunchTime/"/>
    <id>http://yongqianvip.github.io/2016/05/01/LaunchTime/</id>
    <published>2016-05-01T07:07:25.000Z</published>
    <updated>2016-09-14T07:52:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>通过简单的一段代码统计应用启动时间</p>
<a id="more"></a>
<ul>
<li>在<code>main.m</code>中  </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#import &lt;UIKit/UIKit.h&gt;</div><div class="line">#import &quot;AppDelegate.h&quot;</div><div class="line"></div><div class="line">CFAbsoluteTime StartTime;</div><div class="line"></div><div class="line">int main(int argc, char * argv[]) &#123;</div><div class="line">    StartTime = CFAbsoluteTimeGetCurrent();</div><div class="line">    NSLog(@&quot;开始启动----&gt;%f&quot;,StartTime);</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>在<code>AppDelegate.m</code>中</li>
</ul>
<pre><code>#import &quot;AppDelegate.h&quot;

CFAbsoluteTime StartTime;

@implementation AppDelegate

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
  dispatch_async(dispatch_get_main_queue(), ^{
    NSLog(@&quot;完成启动----&gt;%f&quot;, CFAbsoluteTimeGetCurrent());
    NSLog(@&quot;启动用时----&gt;%f&quot;,CFAbsoluteTimeGetCurrent()-StartTime);
  });

  ...
}  
</code></pre><ul>
<li><p>CMD + R，程序运行起来启动时间会第一时间打印出来</p>
</li>
<li><p>原理解释： 这个dispatch_async中提交的工作会在app主线程启动后的下一个run lopp中运行，此时app已经完成了载入并且将要显示第一帧画面，也就是系统会运行到<code>-[UIApplication _reportAppLaunchFinished]</code>之前</p>
</li>
</ul>
<p><a href="http://www.hrchen.com/2013/05/performance-with-instruments/" target="_blank" rel="external">阅读原文</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过简单的一段代码统计应用启动时间&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yongqianvip.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>初识Markdown</title>
    <link href="http://yongqianvip.github.io/2015/12/10/learnMarkdown/"/>
    <id>http://yongqianvip.github.io/2015/12/10/learnMarkdown/</id>
    <published>2015-12-10T07:07:25.000Z</published>
    <updated>2016-09-13T08:28:59.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xp7q7.com1.z0.glb.clouddn.com/cool_cat.jpg" alt="miao"></p>
<h2 id="什么是Markdown"><a href="#什么是Markdown" class="headerlink" title="什么是Markdown?"></a>什么是Markdown?</h2><p>Markdown 是一种轻量级的 <code>标记语言</code>，已经成为一种适用于网络的书写语言。目前已经有很多网站开始支持Markdown文字录入，比如简书， CSDN博客， 我比较喜欢Markdown的优点是它可以导出html格式的文件在网站上发布，可以导出pdf格式文件，甚至你可以用它来写简历……</p>
<p>Markdown虽说算是一门语言，但它的语法真的很简单，常用的也不过十多种，很容易上手，而且一旦熟悉了它的语法，你会发现网络写作原来这么随意.</p>
<a id="more"></a>
<h2 id="Markdown怎么用"><a href="#Markdown怎么用" class="headerlink" title="Markdown怎么用?"></a>Markdown怎么用?</h2><p>以下就常用的几点做简要说明，仅供小白用户参考， 大神请绕行……</p>
<ul>
<li><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a><strong>标题</strong></h3><p>  设置标题很简单，你只需要在你要设置为标题的文本前加 “#”即可，一级标题”#”，二级标题”##”…  最多支持六级标题”######”</p>
<p>  <img src="http://yongqian.sinaapp.com/blog/img/md_title.png" alt="markdowm_title"></p>
</li>
<li><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><p>  添加内嵌代码可以使用一对回勾号” ` “ 包裹一段内嵌代码  </p>
<p>  如<code>这是内嵌代码</code><br>  对于插入代码， 标准Markdown基于缩进代码行或者4个空格位;这让你不用关心代码用的什么语言就可以以较好的格式展示你的代码，缺点是没有代码高亮</p>
<p>  <img src="http://yongqian.sinaapp.com/blog/img/md_code.png" alt="markdowm_code"></p>
</li>
</ul>
<ul>
<li><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a><strong>列表</strong></h3><p>  列表分有序列表和无序列表，写法也相当简单</p>
<p>  <img src="http://yongqian.sinaapp.com/blog/img/md_list.png" alt="markdowm_code"></p>
</li>
</ul>
<ul>
<li><h3 id="加粗-和-斜体"><a href="#加粗-和-斜体" class="headerlink" title="加粗 和 斜体"></a><strong>加粗</strong> 和 <em>斜体</em></h3><p>  <code>**字体加粗**</code> —&gt; <strong>字体加粗</strong></p>
<p>  <code>* 斜体 *</code> –&gt; <em>斜体</em></p>
</li>
<li><h3 id="外链"><a href="#外链" class="headerlink" title="外链"></a><strong>外链</strong></h3><p>  格式: <code>[title](http://)</code><br>  例如  </p>
</li>
</ul>
<pre><code>[点击查看张北草原的照片](http://yongqian.sinaapp.com/blog/img/151202/caoyuan.jpeg)
</code></pre><p><a href="http://yongqian.sinaapp.com/blog/img/151202/caoyuan.jpeg" target="_blank" rel="external">点击查看张北草原的照片</a></p>
<ul>
<li><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a><strong>图片</strong></h3><p>  图片跟外链格式类似 不过前边多了一个<code>!</code><br>  格式: <code>![alt](http://)</code><br>  例如</p>
</li>
</ul>
<pre><code>![张北草原的照片](http://yongqian.sinaapp.com/blog/img/151202/caoyuan.jpeg)
</code></pre><p><img src="http://yongqian.sinaapp.com/blog/img/151202/caoyuan.jpeg" alt="张北草原的照片"></p>
<ul>
<li><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a><strong>引用</strong></h3><p>  使用 <code>&gt;</code> 开头 表示引用  </p>
<blockquote>
<p>这是引用部分  引用了某位大神的文章<br>  感谢这位大神<br>  向大神致敬</p>
</blockquote>
</li>
<li><h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a><strong>脚注</strong></h3><p>  在正文中，如果参考了某些资料或想要单独对某一词语做解释可以添加脚注<br>  例如 <code>什么是Markdown[^1]，Markdown就是一门语言[^2]</code> </p>
<p>  什么是Markdown<a href="Markdown就是一门语言">^1</a>，Markdown就是一门语言<a href="语言指的是语法">^2</a></p>
<p>  与此同时在文章末尾注明脚注内容 </p>
</li>
</ul>
<pre><code>`[^1]: Markdown就是一门语言`
`[^2]: 语言指的是语法`
</code></pre><ul>
<li><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a><strong>表格</strong></h3><p>  之所以把表格放在最后边，是因为我觉得用Markdown写表格太DD疼了<br>  注意:冒号决定表格中内容<code>水平对齐方式</code></p>
</li>
</ul>
<pre><code>| 姓名       | 年龄       | 身高     | 体重
| ---       | :---:     | :--      | --:
| 默认左对齐  | 冒号在两端  | 冒号在左  | 冒号在右
| ZDD      | 18         | 170       | 50
| YYQ      | 19         | 180      | 80
</code></pre><table>
<thead>
<tr>
<th>姓名</th>
<th style="text-align:center">年龄</th>
<th style="text-align:left">身高</th>
<th style="text-align:right">体重</th>
</tr>
</thead>
<tbody>
<tr>
<td>默认左对齐</td>
<td style="text-align:center">居中对齐</td>
<td style="text-align:left">左对齐</td>
<td style="text-align:right">右对齐</td>
</tr>
<tr>
<td>ZDD</td>
<td style="text-align:center">18</td>
<td style="text-align:left">17000000</td>
<td style="text-align:right">500000</td>
</tr>
<tr>
<td>YYQ</td>
<td style="text-align:center">19</td>
<td style="text-align:left">180</td>
<td style="text-align:right">80</td>
</tr>
</tbody>
</table>
<h2 id="Markdown编辑器"><a href="#Markdown编辑器" class="headerlink" title="Markdown编辑器"></a>Markdown编辑器</h2><ul>
<li><p>Mac OS</p>
<p>  <a href="http://www.macupdate.com/app/mac/40420/mou" target="_blank" rel="external">Mou</a><br>  MacDown?</p>
</li>
<li><p>Windows</p>
<p>  没用过没有发言权， 请自行Baidu或Google  ^_^</p>
</li>
</ul>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xp7q7.com1.z0.glb.clouddn.com/cool_cat.jpg&quot; alt=&quot;miao&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;什么是Markdown&quot;&gt;&lt;a href=&quot;#什么是Markdown&quot; class=&quot;headerlink&quot; title=&quot;什么是Markdown?&quot;&gt;&lt;/a&gt;什么是Markdown?&lt;/h2&gt;&lt;p&gt;Markdown 是一种轻量级的 &lt;code&gt;标记语言&lt;/code&gt;，已经成为一种适用于网络的书写语言。目前已经有很多网站开始支持Markdown文字录入，比如简书， CSDN博客， 我比较喜欢Markdown的优点是它可以导出html格式的文件在网站上发布，可以导出pdf格式文件，甚至你可以用它来写简历……&lt;/p&gt;
&lt;p&gt;Markdown虽说算是一门语言，但它的语法真的很简单，常用的也不过十多种，很容易上手，而且一旦熟悉了它的语法，你会发现网络写作原来这么随意.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Markdown" scheme="http://yongqianvip.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>创建podspec文件，为自己的项目添加pod支持</title>
    <link href="http://yongqianvip.github.io/2015/12/02/creatPodspec/"/>
    <id>http://yongqianvip.github.io/2015/12/02/creatPodspec/</id>
    <published>2015-12-02T07:07:25.000Z</published>
    <updated>2016-09-13T08:30:31.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xp7q7.com1.z0.glb.clouddn.com/zhangbei_richu.JPG" alt="top_iamge"><br><a id="more"></a></p>
<h2 id="开篇扯淡"><a href="#开篇扯淡" class="headerlink" title="开篇扯淡"></a>开篇扯淡</h2><p>作为一个iOS开发者，一定用过CocoaPods吧，没用过?<a href="http://code4app.com/article/cocoapods-install-usage" target="_blank" rel="external">点这儿去面壁吧</a></p>
<p>Cocoapods作为iOS开发的包管理器，给我们的开发带来了极大的便利，而且越来越多的第三方类库支持Pod，可以通过Pod傻瓜式的集成到自己的工程中，那么问题来了，我自己也有一系列的小工具类，怎么让它也支持pod集成进而让其他朋友方便的使用呢?</p>
<p>刚好，最近项目不算紧，自己尝试着弄了一下，在这里记录一下尝试的过程， 一来备忘， 二来共享…… </p>
<p>其实网上这种文章数不胜数，但是不一定都是适合自己的，比如接下来写的东西我觉得都是适用于我的，但未必能适用于正在阅读此文的你，又或者下文中有一部内容能够帮到你，如果真是这样，我也很高兴</p>
<p>本文有诸多不完善的地方，以后时间充足在慢慢完善吧</p>
<p>写的不好  砖下留情</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p><code>我这里拿一个小demo做示例，目的是把工程中的一些category提取出来支持 pod</code></p>
<h3 id="1-上传项目源码"><a href="#1-上传项目源码" class="headerlink" title="1.上传项目源码"></a>1.上传项目源码</h3><p>把项目源码上传到gitHub仓库再clone到本地(以iOS_Category为例–<a href="https://github.com/yongqianvip/iOS_Category" target="_blank" rel="external">源码在这里</a> )， 如果项目本来就在gitHub的仓库中， 直接clone到本地即可</p>
<h3 id="2-创建项目的podspec文件"><a href="#2-创建项目的podspec文件" class="headerlink" title="2.创建项目的podspec文件"></a>2.创建项目的podspec文件</h3><ul>
<li>用终端命令cd到本地项目目录并执行如下命令:</li>
</ul>
<pre><code>$ pod spec create iOS_Category
</code></pre><p>这时候本地就生成一个iOS_Category.podspec文件</p>
<ul>
<li>用编辑器打开.podspec文件 (我自己用Sublime Text) </li>
</ul>
<p>删除不必要的注释(这里只简单介绍基本用法，所以只用到一部分必须得字段 更多字段请移步<a href="http://guides.cocoapods.org/syntax/podspec.html" target="_blank" rel="external">http://guides.cocoapods.org/syntax/podspec.html</a>)</p>
<pre><code>Pod::Spec.new do |s|
  s.name         = &quot;iOS_Category&quot;
  s.version      = &quot;0.0.1&quot;
  s.summary      = &quot;all kinds of categories for iOS develop&quot;
  s.description  = &lt;&lt;-DESC
                      this project provide all kinds of categories for iOS developer 
                   DESC
  s.homepage     = &quot;https://github.com/yongqianvip/iOS_Category&quot;
  s.license      = &quot;MIT&quot;
  s.license      = { :type =&gt; &quot;MIT&quot;， :file =&gt; &quot;LICENSE&quot; }
  s.author             = { &quot;yongqianvip&quot; =&gt; &quot;yongqianvip@163.com&quot; }
  s.platform     = :ios
  s.source       = { :git =&gt; &quot;https://github.com/yongqianvip/iOS_Category.git&quot;， :tag =&gt; &quot;0.0.1&quot; }
  s.source_files  = &quot;Classes&quot;， &quot;iOS_Category/Classes/**/*.{h，m}&quot;
  s.exclude_files = &quot;Classes/Exclude&quot;
  s.public_header_files = &quot;iOS_Category/Classes/UIKit/UI_Categories.h&quot;，&quot;iOS_Category/Classes/Foundation/Foundation_Category.h&quot;，&quot;iOS_Category/Classes/**/*.h&quot;
  s.requires_arc = true
end
</code></pre><ul>
<li>验证podspec文件</li>
</ul>
<p>编辑完podspec文件后需要验证一下这个文件是否可用podspec文件不允许有任何的<code>Warning</code>或者<code>Error</code><br>    执行命令</p>
<pre><code>$ pod lib lint
</code></pre><p>如果出现</p>
<pre><code>-&gt; iOS_Category (0.0.1)

iOS_Category passed validation.
</code></pre><p>则说明验证通过， 否则， 根据提示修改podspec文件再次验证直到验证通过</p>
<p>附带说一下，Xcode允许警告存在，所以可以通过命令屏蔽警告</p>
<pre><code>$ pod lib lint --allow-warnings
</code></pre><p>如果出现Error但是提示信息不足，可以添加<code>--verbose</code> 以获取更多错误信息</p>
<pre><code>$ pod lib lint --verbose
</code></pre><h3 id="3-打tag-上传podspec"><a href="#3-打tag-上传podspec" class="headerlink" title="3.打tag 上传podspec"></a>3.打tag 上传podspec</h3><p>podspec文件中需要指定的tag， 完成上述操作后给项目打tag</p>
<pre><code>$ git tag -m&quot;first release iOS_Category with podspec&quot; &quot;0.0.1&quot;
$ git push --tags
</code></pre><p>最后使用<code>pod trunk</code>命令，把podspec文件推送到CocoaPod官方库</p>
<p><code>pod trunk</code> 需要注册  具体做法这里不再赘述 请移步<a href="https://guides.cocoapods.org/making/getting-setup-with-trunk.html" target="_blank" rel="external">CocoaPod官网</a></p>
<p><code>pod trunk</code> 设置完毕后执行命令</p>
<pre><code>$ pod trunk push iOS_Category.podspec
</code></pre><p>这个过程可能会比较耗时，原因你懂的(实在很慢等不及的话，请自备梯子)</p>
<h3 id="4-最后"><a href="#4-最后" class="headerlink" title="4.最后"></a>4.最后</h3><p>如果一切顺利</p>
<pre><code>pod search iOS_Category
</code></pre><p>就可以找到刚才的项目了 并且还有安装命令&lt; pod ‘iOS_Category’，’~&gt;0.0.1’ &gt;</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xp7q7.com1.z0.glb.clouddn.com/zhangbei_richu.JPG&quot; alt=&quot;top_iamge&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="CocoaPods" scheme="http://yongqianvip.github.io/tags/CocoaPods/"/>
    
  </entry>
  
  <entry>
    <title>Gulp 自动任务管理工具</title>
    <link href="http://yongqianvip.github.io/2015/12/01/gulpReadme/"/>
    <id>http://yongqianvip.github.io/2015/12/01/gulpReadme/</id>
    <published>2015-12-01T07:07:25.000Z</published>
    <updated>2016-09-13T08:33:54.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xp7q7.com1.z0.glb.clouddn.com/zhangbei_fengche.jpeg" alt="top_iamge"></p>
<p>Gulp需要全局安装，然后再在项目的开发目录中安装为本地模块。先进入项目目录，运行下面的命令。</p>
<pre><code>$ npm install -g gulp

$ npm install --save-dev gulp
</code></pre><a id="more"></a>
<p>除了安装gulp以外，不同的任务还需要安装不同的gulp插件模块。举个例子，下面代码安装了gulp-uglify模块。</p>
<pre><code>$ npm install --save-dev gulp-uglify
</code></pre><h4 id="gulpfile-js"><a href="#gulpfile-js" class="headerlink" title="* gulpfile.js "></a><strong>* gulpfile.js </strong></h4><p>项目根目录中的gulpfile.js，是Gulp的配置文件。下面就是一个典型的gulpfile.js文件。</p>
<pre><code>var gulp = require(&apos;gulp&apos;);
var uglify = require(&apos;gulp-uglify&apos;);

gulp.task(&apos;minify&apos;, function () {
gulp.src(&apos;myJs/*.js&apos;)
  .pipe(uglify())
  .pipe(gulp.dest(&apos;build_min&apos;))
});
</code></pre><p>上面代码中，<code>gulpfile.js</code>加载<code>gulp</code>和<code>gulp-uglify</code>模块之后，使用<code>gulp</code>模块的<code>task</code>方法指定任务<code>minify</code>。<code>task</code>方法有两个参数，第一个是<code>任务名</code>，第二个是<code>任务函数</code>。在任务函数中，使用<code>gulp</code>模块的<code>src</code>方法，指定所要处理的文件，然后使用<code>pipe</code>方法，将上一步的输出转为当前的输入，进行链式处理。</p>
<p><code>task</code>方法的回调函数使用了两次<code>pipe</code>方法，也就是说做了两种处理。第一种处理是使用<code>gulp-uglify</code>模块，压缩源码；第二种处理是使用<code>gulp</code>模块的<code>dest</code>方法，将上一步的输出写入本地文件，这里是<code>build.js</code>（代码中省略了后缀名js）。</p>
<p>执行<code>minify</code>任务时，就在项目目录中执行下面命令就可以了。</p>
<pre><code>$ gulp minify
</code></pre><p>“从上面的例子中可以看到，gulp充分使用了“管道”思想，就是一个数据流（stream）：src方法读入文件产生数据流，dest方法将数据流写入文件，中间是一些中间步骤，每一步都对数据流进行一些处理。”</p>
<p>下面是另一个数据流的例子。</p>
<pre><code>gulp.task(&apos;js&apos;, function () {
    return gulp.src(&apos;js/*.js&apos;)
        .pipe(jshint())
        .pipe(uglify())
        .pipe(concat(&apos;app.js&apos;))
        .pipe(gulp.dest(&apos;build&apos;));
});

gulp.task(&apos;printHello&apos;,[&apos;minify&apos;], function () {
    for (var i = 10 - 1; i &gt;= 0; i--) {
        console.log(&apos;Hello world!&apos; + i);
    };
});

gulp.task(&apos;watch&apos;, function () {
    gulp.watch(&apos;myJs/*.js&apos;, [&apos;printHello&apos;,&apos;minify&apos;]);
});
</code></pre><p>#####默认任务</p>
<pre><code>gulp.task(&apos;default&apos;,[&apos;watch&apos;]);
</code></pre><hr>
<p>未完待续…….</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xp7q7.com1.z0.glb.clouddn.com/zhangbei_fengche.jpeg&quot; alt=&quot;top_iamge&quot;&gt;&lt;/p&gt;
&lt;p&gt;Gulp需要全局安装，然后再在项目的开发目录中安装为本地模块。先进入项目目录，运行下面的命令。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ npm install -g gulp

$ npm install --save-dev gulp
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="gulp" scheme="http://yongqianvip.github.io/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title>谓词 NSPredicate</title>
    <link href="http://yongqianvip.github.io/2015/11/05/aboutNSPredicate/"/>
    <id>http://yongqianvip.github.io/2015/11/05/aboutNSPredicate/</id>
    <published>2015-11-05T07:07:25.000Z</published>
    <updated>2016-09-14T07:54:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>NSPredicate：谓词</p>
<p>字面翻译是这个意思，但是我觉得谓词这个词太难以理解了<br><code>NSPredicate</code>的具体用途应该还是过滤，类似于过滤条件之类的，相当于一个主语的谓语，所以说会是谓词这个名字。（我是这么理解的）<br><a id="more"></a></p>
<p><a href="http://blog.csdn.net/lmf208/article/details/38345321" target="_blank" rel="external">原文在这里(http://blog.csdn.net/lmf208/article/details/38345321)</a></p>
<p><code>NSPredicate</code>的创建<br>我们看到创建谓词使用类方法</p>
<pre><code>predicateWithFormat: (NSString *)format
</code></pre><p><code>format</code> 里的东西真的和<code>SQL</code>的<code>where</code>条件差不多。另外，参数<code>format</code> 与<code>NSLog</code> 的格式化模版差不多，如果 1 和<br>188.0 是传递过来的参数，你可以写成如下的形式：</p>
<pre><code>@&quot;pid&gt;%d and height&lt;%f&quot;,1,188.0
</code></pre><p><code>NSPredicate</code>中主要的几种运算方式</p>
<ul>
<li><p>1.比较运算符 <code>&gt; 、&lt; 、== 、 &gt;= 、&lt;= 、 !=</code><br>例：<code>@&quot;number &gt;= 99&quot;</code></p>
</li>
<li><p>2.逻辑运算符：<code>AND</code>、<code>OR</code>、<code>NOT</code> 这几个运算符计算并、或、非的结果。</p>
</li>
<li><p>3.范围运算符：<code>IN</code> 、<code>BETWEEN</code><br>例：</p>
</li>
</ul>
<pre><code>@&quot;number BETWEEN {1,5}&quot;
@&quot;address IN {&apos;shanghai&apos;,&apos;nanjing&apos;}&quot;
</code></pre><ul>
<li>4.字符串本身:SELF 例：</li>
</ul>
<pre><code>@&quot;SELF == &apos;APPLE&apos;&quot;
</code></pre><ul>
<li>5.字符串相关：<code>BEGINSWITH</code>、<code>ENDSWITH</code>、<code>CONTAINS</code><br>例： </li>
</ul>
<pre><code>@&quot;name CONTAIN[cd] &apos;ang&apos;&quot; //包含某个字符串
@&quot;name BEGINSWITH[c] &apos;sh&apos;&quot; //以某个字符串开头
@&quot;name ENDSWITH[d] &apos;ang&apos;&quot; //以某个字符串结束

注:`[c]`不区分大小写 , `[d]`不区分发音符号即没有重音符号 , `[cd]`既不区分大小写，也不区分发音符号。
</code></pre><ul>
<li>6.通配符：LIKE<br>例：</li>
</ul>
<pre><code>@&quot;name LIKE[cd] &apos;*er*&apos;&quot; 
// * 代表通配符,Like也接[cd].
@&quot;name LIKE[cd] &apos;???er*&apos;&quot;`
</code></pre><ul>
<li>7.正则表达式：<code>MATCHES</code><br>例：</li>
</ul>
<pre><code>NSString *regex = @&quot;^A.+e$&quot;; 
//以A开头，e结尾
@&quot;name MATCHES %@&quot;,regex
</code></pre><hr>
<p>如何使用<code>NSPredicate</code>对一个自定义实体进行筛选<br><code>NSPredicate</code>我暂时都是用于过滤的，否则我们过滤就需要自己写判断 写循环，去判断输出了。<br>接下来就上代码和例子吧。<br>建立一个实体类<br>Dog</p>
<pre><code>@property (copy   , nonatomic) NSString* name; 
@property (assign , nonatomic) int       age ;
//这样我们就有一个类了
//我们创建 5只Dog的实体
Dog * dog1=[Dog news];
dog1.name=@&quot;这是第一只Dog&quot;;dog1.age=@&quot;11&quot;;
Dog * dog2=[Dog news];
dog2.name=@&quot;这是第二只Dog&quot;;
dog2.age=@&quot;22&quot;;
Dog * dog3=[Dog news];
dog3.name=@&quot;这是第三只Dog&quot;;
dog3.age=@&quot;33&quot;;
Dog * dog4=[Dog news];
dog4.name=@&quot;这是第四只Dog&quot;;
dog4.age=@&quot;44&quot;;
Dog * dog5=[Dog news];
dog5.name=@&quot;这是第五只Dog&quot;;
dog5.age=@&quot;55&quot;;
</code></pre><p>不要吐槽我的Dogs的年龄 → 。→<br>然后我们需要一个Array把他们都装进去</p>
<pre><code>NSArray * dogArr=@[dog1,dog2,dog3,dog4,dog5];
</code></pre><p>酱紫所有的Dog都装到一个数组里了使用<code>NSPredicate</code>的筛选没有使用<code>NSPredicate</code>的筛选应该大家都会写，循环+判断。。。<br>使用<code>NSPredicate</code>的筛选具体使用的代码</p>
<pre><code>//创建谓词的对象 谓词条件是基于KVC的，所以需要说明一点，加入Dog里面有个属性是Doginfo指向Doginfo类，
//在使用的时候 我们的条件就要写成Doginfo.xxx了。
NSPredicate* predicate = [NSPredicate predicateWithFormat:@&quot;name==&apos;这是第一只Dog&apos; AND age ==11&quot;];
for(Dog * d in dogArr)
{
    if([predicate evaluateWithObject:d])
    {
        NSLog(d.name);
    }
}
</code></pre><p>以上的代码打印出来的结果就是 这是第一只<code>Dog
NSPredicate</code>筛选一个对象逻辑还是很清晰的，不过这里比较麻烦的就是 还有一个循环，这里我们会发现数组提供了一个方法可以更方便的检索数组对象<br>直接筛选出一个符合谓词的新数组。</p>
<pre><code>NSPredicate *pre = [NSPredicate predicateWithFormat:@&quot;age &gt;11&quot;];
NSMutableArray *arrayPre=[dogArr filteredArrayUsingPredicate: pre];
</code></pre><p><code>arrayPre</code>里面的对象就会是 除了dog1之外的所有的dog。（至于为什么看我的条件…）</p>
<p>看到这里发现NSPredicate 可以用于自定义的实体的检索、筛选，那如果用于 <code>NSString</code>，<code>NSInteger</code>，<code>bool</code>呢？那我们再看一段代码吧</p>
<pre><code>NSArray *arrays=[NSArray arrayWithObjects: @&quot;Apple&quot;, @&quot;Google&quot;, @&quot;MircoSoft&quot;, nil];
NSPredicate *pre2 = [NSPredicate predicateWithFormat:@&quot;SELF==&apos;Apple&apos;&quot;];
</code></pre><p>上面这段代码是匹配字符串的时候 NSPredicate 需要如何声明<br>使用NSPredicate在两个数组之间进行差异筛选</p>
<pre><code>NSArray* array = @[@&quot;aa&quot;,@&quot;bb&quot;];
NSArray* array2 = @[@&quot;aa&quot;,@&quot;bb&quot;,@&quot;cc&quot;,@&quot;dd&quot;];
NSPredicate* thePredicate = [NSPredicate predicateWithFormat:@&quot;NOT(SELF in %@)&quot;,array];
NSArray* arr3 = [array2 filteredArrayUsingPredicate:thePredicate];
NSLog(@&quot;%@&quot;,arr3);
</code></pre><p>上面的代码输出结果 </p>
<pre><code>arr3={@&quot;cc&quot; ,@&quot;dd&quot;}
</code></pre><p>这样大家就很容易理解了<br>SELF在前面有介绍过 可以往回翻阅一下<br>如何使用正则筛选一个数组</p>
<pre><code>NSString *regex = @&quot;^A.+e$&quot;;//以A 开头，以e 结尾的字符。
NSPredicate *pre= [NSPredicate predicateWithFormat:@&quot;SELF MATCHES %@&quot;, regex];
if([pre evaluateWithObject: @&quot;Apple&quot;]){
    printf(&quot;YES\n&quot;);
}else{
    printf(&quot;NO\n&quot;);
}
</code></pre><p>关于<code>NSPredicate</code>的其他说明和注意事项，以及技巧<br>动态属性名<br>假如你的代码如下</p>
<pre><code>NSPredicate *p = [NSPredicate predicateWithFormat:@&quot;name = %@&quot;, @&quot;name1&quot;]; 
</code></pre><p>显然代码没有任何问题，但是这个不是最好的写法, 我建议如下写法：</p>
<pre><code>NSPredicate *preTemplate = [NSPredicate predicateWithFormat:@&quot;name==$NAME&quot;];
NSDictionary *dic=[NSDictionary dictionaryWithObjectsAndKeys:
@&quot;name1&quot;, @&quot;NAME&quot;,nil];
NSPredicate *pre=[preTemplate predicateWithSubstitutionVariables: dic];
</code></pre><p>这样看上去可能会让代码逻辑更清晰。<br>当过滤条件字段都是动态的时候</p>
<pre><code>NSString *key = @&quot;name&quot;;     
NSString *value = @&quot;name1&quot;;      
NSPredicate *p = [NSPredicate predicateWithFormat:@&quot;%@ = %@&quot;, key, value];
</code></pre><p>然后当你执行到第三行的时候代码就会报错！<br>逻辑上没错误啊！！！为什么会出错呢？<br><code>NSPredicate</code>要自动添加引号，所以最后得到的格式应该是</p>
<pre><code>@&quot;&apos;name&apos; = &apos;name1&apos;&quot;。
</code></pre><p>明显不对。要做的就是:</p>
<pre><code>NSPredicate *p = [NSPredicate predicateWithFormat:@&quot;%K = %@&quot;, key, value]; 
</code></pre><p>总结<code>NSPredicate</code> 的简单的使用就介绍到这里，这里有些都是从网络上其他人的额博客转过来的内容，我自己加以修改和一些自己的理解。希望可以帮到大家。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;NSPredicate：谓词&lt;/p&gt;
&lt;p&gt;字面翻译是这个意思，但是我觉得谓词这个词太难以理解了&lt;br&gt;&lt;code&gt;NSPredicate&lt;/code&gt;的具体用途应该还是过滤，类似于过滤条件之类的，相当于一个主语的谓语，所以说会是谓词这个名字。（我是这么理解的）&lt;br&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yongqianvip.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS中加载Gif图的正确姿势</title>
    <link href="http://yongqianvip.github.io/2015/08/18/iOS_loadGif/"/>
    <id>http://yongqianvip.github.io/2015/08/18/iOS_loadGif/</id>
    <published>2015-08-18T07:07:25.000Z</published>
    <updated>2016-09-13T08:37:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>昨天无意中看到一个帖子，写如何加载gif图的，感觉好麻烦的样子，本来很简单的一件事，为什么搞的这么复杂呢？<br><a id="more"></a><br>的确，App上有的地方能够显示一些动态图（gif图）那对用户体验来说可是极好的，绝对是App的加分亮点，逼格立马上了好几个台阶  </p>
<p><strong>But</strong>  </p>
<p>我们都知道iOS中显示图片的控件是UIImageView，但是UIImageView不支持.gif格式的图片，那么怎么才能正确的加载一个gif图呢？    </p>
<p>其实，仔细想想，除了UIImageView可以加载图片之外，就没有别的系统控件了么？仔细想想，当然有！！</p>
<p><strong><code>UIWebView</code></strong>  </p>
<h3 id="用WebView"><a href="#用WebView" class="headerlink" title="用WebView"></a>用WebView</h3><p><code>UIWebView</code>有这么一个方法：  </p>
<pre><code>- (void)loadData:(NSData *)data MIMEType:(NSString *)MIMEType textEncodingName:(NSString *)textEncodingName baseURL:(NSURL *)baseURL;
</code></pre><ul>
<li><code>data</code>就是要加载的二进制数据（<code>NSData</code>），我们要加载gif图，就需要先把图片转换成<code>NSData</code>类型  </li>
<li><a href="http://baike.baidu.com/link?url=aUuO5TvauVv9Z_LL-hCEuoHw-aVnPkiGmd1plUtc1YZplw7Okl7a4GrLscsARuR5Vs9kwRneHRlWkxgNzxPIpq" target="_blank" rel="external"><code>MIME</code>(Multipurpose Internet Mail Extensions)</a><a href="它是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开">^1</a>多用途互联网邮件扩展类型。在<a href="http://www.w3school.com.cn/media/media_mimeref.asp" target="_blank" rel="external">MIME 参考手册</a>中我们可以查到，我们需要的类型是<code>image/gif</code></li>
<li>编码格式 <code>UTF-8</code>  </li>
<li><code>Url</code>这里就不需要了</li>
</ul>
<p>那么借助<code>UIWebView</code>的这个方法就可以加载gif格式的图片了，基本思路就是：<br> <strong>创建一个类（GifImageView）继承自UIView，在GifImageView中创建一个UIWebView加载gif图，这样一来，加载gif就像加载一个UIView那么easy了</strong></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ul>
<li><code>GifImageView.h</code></li>
</ul>
<pre><code>#import &lt;UIKit/UIKit.h&gt;    
@interface GifImageView : UIView
- (id)initWithFrame:(CGRect)frame GifImageName:(NSString*)gitImageName;
@end
</code></pre><ul>
<li><code>GifImageView.m</code></li>
</ul>
<pre><code>#import &quot;GifImageView.h&quot;
@implementation GifImageView
- (id)initWithFrame:(CGRect)frame GifImageName:(NSString*)gitImageName{
    self = [super initWithFrame:frame];
    if (self) {
        self.backgroundColor = [UIColor clearColor];
        UIView *placeholdView = [[UIView alloc]initWithFrame:CGRectMake(0, 0, 1, 1)];
        [self addSubview:placeholdView];
        NSData *gifData = [NSData dataWithContentsOfFile:[[NSBundle mainBundle] pathForResource:gitImageName ofType:@&quot;gif&quot;]];
        UIWebView *webView = [[UIWebView alloc] initWithFrame:CGRectMake(0, 0, frame.size.width, frame.size.height)];
        [webView setScalesPageToFit: YES];
        [webView setBackgroundColor: [UIColor clearColor]];
        [webView setOpaque: 0];
        [self addSubview:webView];
        [webView loadData:gifData MIMEType:@&quot;image/gif&quot; textEncodingName:@&quot;&quot; baseURL:[NSURL URLWithString:@&quot;&quot;]];
        [webView setUserInteractionEnabled:NO];
    }
    return self;
}
</code></pre><ul>
<li>使用</li>
</ul>
<pre><code>...
#import &quot;GifImageView.h&quot;
...

    GifImageView *gifView = [[GifImageView alloc] initWithFrame:CGRectMake(50, 270, 175, 105) GifImageName:@&quot;gifImage&quot;];
    [self.view addSubview:gifView];
...
</code></pre><ul>
<li><p>代码语义明确我就不再写注释了 </p>
<p>  比较关键的是关闭了<code>webView</code>的交互，防止触发滚动，长按等事件，但这不影响其父视图的交互</p>
</li>
<li>移除<br>  它就是一个<code>View</code>，如果你想移除它，就用你的洪荒之力吧</li>
</ul>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>使用这个方案我自己有一个顾虑，就是用的多了会不会有一些问题，比如性能问题  </p>
<p>有gif图，能给一个App添彩不少，但是我到目前为止还没有发现哪一个App中有大量的gif图展示的，一般项目中不会有大量的gif图存在（一些主要目的就是展示gif图的App除外），我自己的项目中也只是个别地方用到，所以不能确定对大量使用这种方案会出现哪些问题。。。</p>
<p>当然，这肯定不是唯一的方案，也不一定是最好的方案<br>如果你觉得这个方案有不妥的地方，欢迎留言指正<br>如果你有更好的方案，也欢迎留言共同学习</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天无意中看到一个帖子，写如何加载gif图的，感觉好麻烦的样子，本来很简单的一件事，为什么搞的这么复杂呢？&lt;br&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yongqianvip.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>UIAlertView 和 UIAlertViewController之间的抉择</title>
    <link href="http://yongqianvip.github.io/2015/05/10/uialertviewcontroller_base/"/>
    <id>http://yongqianvip.github.io/2015/05/10/uialertviewcontroller_base/</id>
    <published>2015-05-10T07:07:25.000Z</published>
    <updated>2016-09-13T08:38:06.000Z</updated>
    
    <content type="html"><![CDATA[<p> iOS8之后UIAlertViewController的出现让我们不得不考虑在iOS7上的兼容问题</p>
<p>其实无非是做一下判断iOS8之前仍然用UIAlertView 之后用UIAlertViewController<br><a id="more"></a></p>
<h4 id="关于UIAlertViewController"><a href="#关于UIAlertViewController" class="headerlink" title="关于UIAlertViewController"></a>关于UIAlertViewController</h4><p>看<code>源码</code></p>
<ul>
<li><strong>首先要说的是<code>UIAlertControllerStyle</code>这一属性</strong></li>
</ul>
<p>在头文件中</p>
<pre><code>typedef NS_ENUM(NSInteger, UIAlertControllerStyle) {
  UIAlertControllerStyleActionSheet = 0,
  UIAlertControllerStyleAlert
} NS_ENUM_AVAILABLE_IOS(8_0);
</code></pre><p>这么一来，UIAlertController就等于是<code>UIAlertView</code>和<code>UIActionSheet</code>的合体了，只需要设置不同的style就可任意的切换要AlertView还是ActionSheet了<br>（ActionSheet这里先不说，这里主要说说UIAlertController替代UIAlertView的用法）。</p>
<ul>
<li><strong>其次是继承关系</strong></li>
</ul>
<p>·</p>
<pre><code>NS_CLASS_AVAILABLE_IOS(8_0) @interface UIAlertController : UIViewController
</code></pre><p><code>UIAlertController</code>继承自<code>UIViewController</code>，那么注定它的用法和继承自<code>UIView</code>的<code>UIAlertView</code>和<code>UIActionSheet</code>不同，<code>addSubView:</code>的方法肯定是不能用了，在一个controller中想要呈现另一个controller，我首先想到的是模态</p>
<pre><code>- (void)presentViewController:(UIViewController *)viewControllerToPresent animated: (BOOL)flag completion:(void (^ __nullable)(void))completion NS_AVAILABLE_IOS(5_0);
</code></pre><p>了解以上的基本信息，就可以开始尝试使用了</p>
<h4 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h4><pre><code>//初始化
UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@&quot;温馨提示&quot; message:@&quot;您正在使用 UIAlertController&quot; preferredStyle:UIAlertControllerStyleAlert];

//创建action 添加到alertController上 可根据UIAlertActionStyleDefault创建不通的alertAction
UIAlertAction *action1 = [UIAlertAction actionWithTitle:@&quot;确定&quot; style:UIAlertActionStyleDefault handler:^(UIAlertAction *action) {
    //回调
    // 模态视图，使用dismiss 隐藏
    [alertController dismissViewControllerAnimated:YES completion:nil];

}];
UIAlertAction *action2 = [UIAlertAction actionWithTitle:@&quot;取消&quot; style:UIAlertActionStyleCancle handler:^(UIAlertAction *action) {
    [alertController dismissViewControllerAnimated:YES completion:nil];

}];

//往alertViewController上添加alertAction
[alertController addAction:action1];
[alertController addAction:action2];

//呈现
[self presentViewController:alertController animated:YES completion:nil];
</code></pre><p>这里需要提一下<code>UIAlertAction</code>，它是随UIAlertViewController一起出现的，它的用法也很简单，看头文件就行了，不再赘述，但需要特别说明的是，UIAlertAction通过block回调使alert相关的代码变得紧凑，明了，不再像UIAlertView使用delegate把相关代码拆散。</p>
<h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>其实从上边可以看出使用UIAlertViewController是非常简单的，无非用的时候做一下兼容处理，为什么我还要写这么一段？因为有人懒。。。。</p>
<p>这里有一个工具类，做好了iOS8之前和之后的兼容</p>
<p>拿走不谢<a href="https://github.com/yongqianvip/iOS_DevTool" target="_blank" rel="external">https://github.com/yongqianvip/iOS_DevTool</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; iOS8之后UIAlertViewController的出现让我们不得不考虑在iOS7上的兼容问题&lt;/p&gt;
&lt;p&gt;其实无非是做一下判断iOS8之前仍然用UIAlertView 之后用UIAlertViewController&lt;br&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yongqianvip.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>&lt;&lt;重构是改革,重写是革命&gt;&gt;</title>
    <link href="http://yongqianvip.github.io/2015/03/15/RecreatRebuild/"/>
    <id>http://yongqianvip.github.io/2015/03/15/RecreatRebuild/</id>
    <published>2015-03-15T07:07:25.000Z</published>
    <updated>2016-09-13T07:34:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>如果将一个软件系统或项目比喻成一个国家，那么重构就好比是改革，推翻老的系统，重写一个新系统就好比是革命。重构就是戊戌变法，重写就是辛亥革命。革命总是比改革要付出更多的代价，因为革命是要流血的。重写一个系统也是如此，要付出比重构更大的代价，因为原有的代码基本上全抛弃，公司曾经为那些编写老系统代码的程序员支付的工资就全付之东流了。但是，国内大部分软件公司仍然每隔三四年就上演一次这样的悲剧。究其原因，乃是不知道用重构这样小的代价去改善既有代码的设计。即便听说过重构，但却对重构的技巧、本质和意义一知半解，结果往往打着重构的旗帜，却做着重写的工作。</p>
<hr>
<p>重构是每天都应该做的工作。那些说“等我们n.X版本发布以后，有时间了，我们好好重构一下整个系统，这个系统中的代码太乱了”，这不是重构。既然知道代码乱，有坏味道了，就应该立即着手重构。</p>
<hr>
<p>重写往往是从来不重构造成的，代码越来越臃肿、冗余、混乱、腐朽，设计上发现的漏洞越来越多，实在无法在原有系统上维护和扩充代码了。于是开始所谓“重构”，却发现无从下手，无法完成，只好重写。这好比一个朝代无法延续了，于是来一场起义，建立一个新王朝，时间长了，又陷入腐朽，又被推翻，周而复始。人事间的事往往都如此，新系统写好后，三五年后又是推到重写。</p>
<hr>
<p>为什么从来不重构呢？国内的公司很多还处于瀑布开发模式的思维中，认为设计阶段完成后是编码阶段，编码阶段是不能修改设计的。目前先进的软件工程思想如敏捷开发都是迭代开发模式，设计是在多次迭代的过程中逐步完善的。尤其是XP编程，完全没有设计阶段的概念，这对很多国内的软件开发者是个革命性的思想。</p>
<hr>
<p>事实上，国内的软件设计者大多从业时间不长，工作两三年就敢做一些复杂系统的架构设计，经验、技术和能力的不足导致他们的设计往往是拙劣、丑陋和低效的，漏洞百出。瀑布开发模式往往有形无实，到测试和维护阶段总是能发现设计上致命的问题。这时要去改正这些设计错误，需要修改代码。但代码往往是混乱和低质量的，查错困难，修改的难度非常大。大部分项目经理往往是采取一种治标不治本的办法解决问题，而不去惊动原有的设计。最后导致设计的问题积累得越来越多，直到所有的人都无法忍受了，就重写。</p>
<hr>
<p>这其中涉及到编码过程中的质量控制和代码评审的问题，大部分软件公司都没有代码评审，也没有别的代码质量控制的办法。其次，如果代码质量还可以忍受，因担心重构后不能保证原有的功能和特性而不敢重构，这就涉及到敏捷开发原则中提到的一个原则：勇气！大多数程序员似乎都缺乏这个特质——勇气，是的，改变的勇气。虽然勇气不是个技术问题，但没有勇气，重构也是无法完成的。</p>
<hr>
<p>做什么事情都需要勇气，不仅仅是开发软件！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果将一个软件系统或项目比喻成一个国家，那么重构就好比是改革，推翻老的系统，重写一个新系统就好比是革命。重构就是戊戌变法，重写就是辛亥革命。革命总是比改革要付出更多的代价，因为革命是要流血的。重写一个系统也是如此，要付出比重构更大的代价，因为原有的代码基本上全抛弃，公司曾经
    
    </summary>
    
    
      <category term="经验" scheme="http://yongqianvip.github.io/tags/%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>UITableView去掉headerView和footerView的粘性,随tableview滚动(有瑕疵)</title>
    <link href="http://yongqianvip.github.io/2015/02/15/tableViewHeaderFooterView/"/>
    <id>http://yongqianvip.github.io/2015/02/15/tableViewHeaderFooterView/</id>
    <published>2015-02-15T07:07:25.000Z</published>
    <updated>2016-09-13T07:34:19.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>-(void)scrollViewDidScroll:(UIScrollView *)scrollView  
{  
    if (scrollView.tag == 100102) {  
        UITableView *tableview = (UITableView *)scrollView;  
        CGFloat sectionHeaderHeight = 20;  
        CGFloat sectionFooterHeight = 20;  
        CGFloat offsetY = tableview.contentOffset.y;  
        if (offsetY &gt;= 0 &amp;&amp; offsetY &lt;= sectionHeaderHeight)  
        {  
            tableview.contentInset = UIEdgeInsetsMake(-offsetY, 0, -sectionFooterHeight, 0);  
        }else if (offsetY &gt;= sectionHeaderHeight &amp;&amp; offsetY &lt;= tableview.contentSize.height - tableview.frame.size.height - sectionFooterHeight)  
        {  
            tableview.contentInset = UIEdgeInsetsMake(-sectionHeaderHeight, 0, -sectionFooterHeight, 0);  
        }else if (offsetY &gt;= tableview.contentSize.height - tableview.frame.size.height - sectionFooterHeight &amp;&amp; offsetY &lt;= tableview.contentSize.height - tableview.frame.size.height)  
        {  
            tableview.contentInset = UIEdgeInsetsMake(-offsetY, 0, -(tableview.contentSize.height - tableview.frame.size.height - sectionFooterHeight), 0);  
        }  
    }  
}  
</code></pre><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点:"></a>缺点:</h3><p>这个方法目前只适用于headerView和footerView的高度都是固定值的情况,另外在滚动到最后一个footerView即将显示的时候,滚动条变化有点儿突然</p>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;-(void)scrollViewDidScroll:(UIScrollView *)scrollView  
{  
    if (scrollView.tag == 100102) {  
        UITableView *tableview 
    
    </summary>
    
    
      <category term="iOS" scheme="http://yongqianvip.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>获取iOS设备的UDID</title>
    <link href="http://yongqianvip.github.io/2014/11/13/getUDID/"/>
    <id>http://yongqianvip.github.io/2014/11/13/getUDID/</id>
    <published>2014-11-13T07:07:25.000Z</published>
    <updated>2016-09-13T08:39:55.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="UDID"><a href="#UDID" class="headerlink" title="UDID"></a>UDID</h2><p>UDID （即Unique Device Identifier）是一个由子母和数字组成的 40 个字符串的序号，用来区别包括 iPhones, iPads, 以及 iPod Touches等iOS设备，这些编码看起来是随机的，实际上是跟硬件设备特点相联系的。<br><a id="more"></a></p>
<h2 id="使用keyChain存储UUID替代UDID"><a href="#使用keyChain存储UUID替代UDID" class="headerlink" title="使用keyChain存储UUID替代UDID"></a>使用keyChain存储UUID替代UDID</h2><ul>
<li><p>导入Security.framework</p>
</li>
<li><p>创建工具类”JPKeyChain”</p>
</li>
</ul>
<h5 id="JPKeychain-h"><a href="#JPKeychain-h" class="headerlink" title="JPKeychain.h"></a>JPKeychain.h</h5><pre><code>//
//  JPKeychain.h
//  IFood517
//
//  Created by YYQ on 14/11/13.
//  Copyright (c) 2014年 YYQ. All rights reserved.
//

#import &lt;Foundation/Foundation.h&gt;
#import &lt;Security/Security.h&gt;

@interface JPKeychain : NSObject
+ (void)save:(NSString *)service data:(id)data;
+ (id)load:(NSString *)service;
+ (void)delete:(NSString *)service;
@end  
</code></pre><h5 id="JPKeychain-m"><a href="#JPKeychain-m" class="headerlink" title="JPKeychain.m"></a>JPKeychain.m</h5><pre><code>//
//  JPKeychain.m
//  IFood517
//
//  Created by YYQ on 14/11/13.
//  Copyright (c) 2014年 YYQ. All rights reserved.
//

#import &quot;JPKeychain.h&quot;

@implementation JPKeychain
+ (NSMutableDictionary *)getKeychainQuery:(NSString *)service {
    return [NSMutableDictionary dictionaryWithObjectsAndKeys:
            (id)kSecClassGenericPassword,(id)kSecClass,
            service, (id)kSecAttrService,
            service, (id)kSecAttrAccount,
            (id)kSecAttrAccessibleAfterFirstUnlock,(id)kSecAttrAccessible,
            nil];
}

+ (void)save:(NSString *)service data:(id)data {
    //Get search dictionary
    NSMutableDictionary *keychainQuery = [self getKeychainQuery:service];
    //Delete old item before add new item
    SecItemDelete((CFDictionaryRef)keychainQuery);
    //Add new object to search dictionary(Attention:the data format)
    [keychainQuery setObject:[NSKeyedArchiver archivedDataWithRootObject:data] forKey:(id)kSecValueData];
    //Add item to keychain with the search dictionary
    SecItemAdd((CFDictionaryRef)keychainQuery, NULL);
}

+ (id)load:(NSString *)service {
    id ret = nil;
    NSMutableDictionary *keychainQuery = [self getKeychainQuery:service];
    //Configure the search setting
    //Since in our simple case we are expecting only a single attribute to be returned (the password) we can set the attribute kSecReturnData to kCFBooleanTrue
    [keychainQuery setObject:(id)kCFBooleanTrue forKey:(id)kSecReturnData];
    [keychainQuery setObject:(id)kSecMatchLimitOne forKey:(id)kSecMatchLimit];
    CFDataRef keyData = NULL;
    if (SecItemCopyMatching((CFDictionaryRef)keychainQuery, (CFTypeRef *)&amp;keyData) == noErr) {
        @try {
            ret = [NSKeyedUnarchiver unarchiveObjectWithData:(__bridge NSData *)keyData];
        } @catch (NSException *e) {
            NSLog(@&quot;Unarchive of %@ failed: %@&quot;, service, e);
        } @finally {
        }
    }
    if (keyData)
        CFRelease(keyData);
    return ret;
}

+ (void)delete:(NSString *)service {
    NSMutableDictionary *keychainQuery = [self getKeychainQuery:service];
    SecItemDelete((CFDictionaryRef)keychainQuery);
}

@end
</code></pre><ul>
<li>有了这个工具类，我们就可以在keyChain中存储一些关键数据，比如用户名，密码之类，那么我们同样也就可以把UUID存进去替代UDID了</li>
</ul>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><pre><code>#import &quot;CommonCrypto/CommonDigest.h&quot;
#import &quot;JPKeychain.h&quot;


NSString * const KEY_UDID_INSTEAD = @&quot;com.jpgk.app.udid.instead.test&quot;;

#pragma mark - Keychain 获取UUID
+(NSString *)getDeviceIDInKeychain
{
    NSString *getUDIDInKeychain = (NSString *)[JPKeychain load:KEY_UDID_INSTEAD];
    NSLog(@&quot;从keychain中获取到的 UDID_INSTEAD %@&quot;,getUDIDInKeychain);
    if (!getUDIDInKeychain ||[getUDIDInKeychain isEqualToString:@&quot;&quot;]||[getUDIDInKeychain isKindOfClass:[NSNull class]]) {
        CFUUIDRef puuid = CFUUIDCreate( nil );
        CFStringRef uuidString = CFUUIDCreateString( nil, puuid );
        NSString * result = (NSString *)CFBridgingRelease(CFStringCreateCopy( NULL, uuidString));
        CFRelease(puuid);
        CFRelease(uuidString);
        [JPKeychain save:KEY_UDID_INSTEAD data:result];
        getUDIDInKeychain = (NSString *)[JPKeychain load:KEY_UDID_INSTEAD];
    }
    NSLog(@&quot;最终 ———— UDID_INSTEAD %@&quot;,getUDIDInKeychain);
    return getUDIDInKeychain;
}
</code></pre><p>#更新 ————</p>
<ul>
<li>代码已上传到Git，并支持Pod（<a href="https://github.com/yongqianvip/KeyChain-UDID" target="_blank" rel="external">点击这里查看源码</a> ）</li>
<li>Pod接入：</li>
</ul>
<pre><code>pod &apos;KeyChain-UDID&apos;
pod install
</code></pre><ul>
<li>在需要使用的类中</li>
</ul>
<pre><code>#import &lt;YYQKeyChain.h&gt;
...
...
 NSString *udid = [YYQKeyChain getUDIDWithUniqueKey:@&quot;com.comname.app.udid.instead&quot;];
NSLog(@&quot;udid from keyChain %@&quot;, udid);
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;UDID&quot;&gt;&lt;a href=&quot;#UDID&quot; class=&quot;headerlink&quot; title=&quot;UDID&quot;&gt;&lt;/a&gt;UDID&lt;/h2&gt;&lt;p&gt;UDID （即Unique Device Identifier）是一个由子母和数字组成的 40 个字符串的序号，用来区别包括 iPhones, iPads, 以及 iPod Touches等iOS设备，这些编码看起来是随机的，实际上是跟硬件设备特点相联系的。&lt;br&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yongqianvip.github.io/tags/iOS/"/>
    
  </entry>
  
</feed>
